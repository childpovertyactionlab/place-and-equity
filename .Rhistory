Geography = "PUMA",
System = "Human Development",
Area = "Transportation",
Metric = "Percent of private transit commutes longer than 45 min",
Measure = "%",
Source = "PUMS",
Year = 2022,
BiggerBetter = 0
); join_list <- unique(c(join_list, list(HD_Tr_private_transit_commute_place), list(HD_Tr_private_transit_commute_PUMA)))
HD_Tr_pct_public_commute_0 <- pums %>%
left_join(target_PUMAs %>% st_drop_geometry(), by = "GEOID", suffix = c("", "_target")) %>%
filter(
TRANWORK != 0,
!is.na(PUMACE20)
) %>%
mutate(
pubtrans = TRANWORK %in% public_transit
); HD_Tr_pct_public_commute_place <-
bind_rows(
pollster::moe_crosstab(
HD_Tr_pct_public_commute_0,
y = pubtrans,
x = GEOID.y,
weight = PERWT) %>%
mutate(GEOID.y = as.factor(GEOID.y),
raceeth = "all"),
pollster::moe_crosstab_3way(
HD_Tr_pct_public_commute_0,
y = pubtrans,
x = GEOID.y,
z = RACEON,
weight = PERWT) %>%
rename(
raceeth = RACEON
),
pollster::moe_crosstab_3way(
HD_Tr_pct_public_commute_0,
y = pubtrans,
x = GEOID.y,
z = hisp,
weight = PERWT) %>%
rename(
raceeth = hisp
),
) %>%
filter(
pubtrans == T,
raceeth != "!latino"
) %>%
mutate(pct = pct/100) %>%
select(
raceeth,
GEOID = GEOID.y,
pct
) %>%
pivot_wider(
names_from = raceeth,
values_from = pct
) %>%
mutate(City = target_cities$cityst[match(.data$GEOID, target_cities$GEOID)],
Geography = "Place",
System = "Human Development",
Area = "Transportation",
Metric = "Percent commuting by public transit",
Measure = "%",
Source = "PUMS",
Year = 2022,
BiggerBetter = 1
); HD_Tr_pct_public_commute_PUMA <-
bind_rows(
pollster::moe_crosstab(
HD_Tr_pct_public_commute_0,
y = pubtrans,
x = GEOID,
weight = PERWT) %>%
mutate(GEOID = as.factor(GEOID),
raceeth = "all"),
pollster::moe_crosstab_3way(
HD_Tr_pct_public_commute_0,
y = pubtrans,
x = GEOID,
z = RACEON,
weight = PERWT) %>%
rename(
raceeth = RACEON
),
pollster::moe_crosstab_3way(
HD_Tr_pct_public_commute_0,
y = pubtrans,
x = GEOID,
z = hisp,
weight = PERWT) %>%
rename(
raceeth = hisp
),
) %>%
filter(
pubtrans == T,
raceeth != "!latino"
) %>%
mutate(pct = pct/100) %>%
select(
raceeth,
GEOID = GEOID,
pct
) %>%
pivot_wider(
names_from = raceeth,
values_from = pct
) %>%
mutate(City = target_PUMAs$cityst[match(.data$GEOID, target_PUMAs$GEOID)],
Geography = "PUMA",
System = "Human Development",
Area = "Transportation",
Metric = "Percent commuting by public transit",
Measure = "%",
Source = "PUMS",
Year = 2022,
BiggerBetter = 1
); join_list <- unique(c(join_list, list(HD_Tr_pct_public_commute_place), list(HD_Tr_pct_public_commute_PUMA)))
HD_Tr_pct_private_commute_0 <- pums %>%
left_join(target_PUMAs %>% st_drop_geometry(), by = "GEOID", suffix = c("", "_target")) %>%
filter(
TRANWORK != 0,
!is.na(PUMACE20)
) %>%
mutate(
privtrans = TRANWORK %in% private_transit
); HD_Tr_pct_private_commute_place <-
bind_rows(
pollster::moe_crosstab(
HD_Tr_pct_private_commute_0,
y = privtrans,
x = GEOID.y,
weight = PERWT) %>%
mutate(GEOID.y = as.factor(GEOID.y),
raceeth = "all"),
pollster::moe_crosstab_3way(
HD_Tr_pct_private_commute_0,
y = privtrans,
x = GEOID.y,
z = RACEON,
weight = PERWT) %>%
rename(
raceeth = RACEON
),
pollster::moe_crosstab_3way(
HD_Tr_pct_private_commute_0,
y = privtrans,
x = GEOID.y,
z = hisp,
weight = PERWT) %>%
rename(
raceeth = hisp
),
) %>%
filter(
privtrans == T,
raceeth != "!latino"
) %>%
mutate(pct = pct/100) %>%
select(
raceeth,
GEOID = GEOID.y,
pct
) %>%
pivot_wider(
names_from = raceeth,
values_from = pct
) %>%
mutate(City = target_cities$cityst[match(.data$GEOID, target_cities$GEOID)],
Geography = "Place",
System = "Human Development",
Area = "Transportation",
Metric = "Percent commuting by private transit",
Measure = "%",
Source = "PUMS",
Year = 2022,
BiggerBetter = 1
); HD_Tr_pct_private_commute_PUMA <-
bind_rows(
pollster::moe_crosstab(
HD_Tr_pct_private_commute_0,
y = privtrans,
x = GEOID,
weight = PERWT) %>%
mutate(GEOID = as.factor(GEOID),
raceeth = "all"),
pollster::moe_crosstab_3way(
HD_Tr_pct_private_commute_0,
y = privtrans,
x = GEOID,
z = RACEON,
weight = PERWT) %>%
rename(
raceeth = RACEON
),
pollster::moe_crosstab_3way(
HD_Tr_pct_private_commute_0,
y = privtrans,
x = GEOID,
z = hisp,
weight = PERWT) %>%
rename(
raceeth = hisp
),
) %>%
filter(
privtrans == T,
raceeth != "!latino"
) %>%
mutate(pct = pct/100) %>%
select(
raceeth,
GEOID = GEOID,
pct
) %>%
pivot_wider(
names_from = raceeth,
values_from = pct
) %>%
mutate(City = target_PUMAs$cityst[match(.data$GEOID, target_PUMAs$GEOID)],
Geography = "PUMA",
System = "Human Development",
Area = "Transportation",
Metric = "Percent commuting by private transit",
Measure = "%",
Source = "PUMS",
Year = 2022,
BiggerBetter = 1
); join_list <- unique(c(join_list, list(HD_Tr_pct_private_commute_place), list(HD_Tr_pct_private_commute_PUMA)))
df <- bind_rows(join_list)
dallas_only <- df %>%
filter(Geography %in% c("Place", "CSA")) %>%
mutate_all(~ifelse(is.nan(.), NA, .)) %>%
filter(!is.na(all)) %>%
group_by(System, Area, Metric, Measure) %>%
mutate(
DallasRank = case_when(
BiggerBetter == 1 ~ rank(-all),
TRUE ~ rank(all)
),
Ranked = max(DallasRank, na.rm = TRUE),
) %>%
ungroup() %>%
filter(City == "Dallas, TX") %>%
select(System, Area, Metric, Measure, Dallas = all, DallasRank, Ranked)
peer_medians <- df %>%
filter(Geography %in% c("Place", "CSA")) %>%
group_by(System, Area, Metric, Measure) %>%
summarize(
PeerMedian = median(all, na.rm = TRUE),
BestPeer = case_when(
sum(!is.na(all)) == 0 ~ NA,
BiggerBetter == 1 ~ max(all, na.rm = TRUE),
BiggerBetter == 0 ~ min(all, na.rm = TRUE),
TRUE ~ NA
)
) %>%
ungroup() %>%
distinct() %>%
left_join(dallas_only)
write_csv(peer_medians, "data/peer_medians.csv")
geographies <- c(
"Block group" = 1,
"Tract" = 2,
"PUMA" = 3,
"Place" = 4,
"CSA" = 5,
"County" = 6
)
smallgeo <- df %>%
mutate(
geolevel = geographies[Geography]
) %>%
group_by(System, Area, Metric, Measure) %>%
filter(geolevel == min(geolevel))
write_csv(smallgeo %>% distinct(Geography), "data/smallest_geo_available.csv")
dallas_smallgeo <- smallgeo %>%
filter(City == "Dallas, TX")
write_csv(dallas_smallgeo, "data/dallas_smallgeo.csv")
?invokeMethod
library(tidyverse)
library(ggplot2)
library(sf)
library(leaflet)
library(kableExtra)
library(cpaltemplates)
city_list <- list("Dallas, TX", "San Diego, CA", "Austin, TX", "Charlotte, NC", "Washington, DC", "Phoenix, AZ", "San Antonio, TX", "Atlanta, GA", "Houston, TX", "Miami, FL", "Philadelphia, PA")
geographies <- c(
"Block group" = 1,
"Tract" = 2,
"PUMA" = 3,
"Place" = 4,
"CSA" = 5,
"County" = 6
)
city_geometry <- tigris::places(year = 2022, cb = TRUE)
dallas_remove <- sf::st_sfc(sf::st_polygon(list(matrix(c(
-96.6, 32.75,
-96.6, 33.1,
-96.3, 33.1,
-96.3, 32.75,
-96.6, 32.75
), ncol = 2, byrow = TRUE))), crs = sf::st_crs(city_geometry))
# target_cities <- city_geometry %>%
#   mutate(cityst = paste0(NAME, ", ", STUSPS)) %>%
#   filter(cityst %in% city_list) %>%
#   mutate(geometry = if_else(cityst == "Dallas, TX",
#                             sf::st_difference(geometry, dallas_remove),
#                             geometry)) %>%
#   mutate(geometry = sf::st_simplify(geometry, dTolerance = 1))
target_cities <- st_read("data/target_cities.geojson")
# city_plots <- lapply(target_cities$cityst, function(city) {
#   city_data <- target_cities %>% filter(cityst == city)
#   ggplot(city_data) +
#     geom_sf(fill = "grey10", color = NA) +
#     theme_void()
# })
fips_codes <- tidycensus::fips_codes %>%
mutate(CountyFIPS = paste0(state_code, county_code))
target_counties <- st_read("data/target_counties.geojson")
target_metros <- st_read("data/target_metros.geojson")
target_tracts <- st_read("data/target_tracts.geojson")
# target_sds_TX <- st_read("data/target_sds_TX.geojson")
# targets <- bind_rows(
#   target_counties %>%
#     mutate(
#       Geography = "County"
#     ) %>%
#     select(
#       Geography,
#       GEOID = CountyFIPS,
#       NAME = NAME.x,
#       City = cityst,
#       geometry
#     ),
#   target_metros %>%
#     mutate(
#       Geography = "CSA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_cities %>%
#     mutate(
#       Geography = "Place"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_PUMAs %>%
#     mutate(
#       Geography = "PUMA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_tracts %>%
#     mutate(
#       Geography = "Tract"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     ),
#   target_2019tracts %>%
#     mutate(
#       Geography = "Tract (2019)"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     )
# )
# st_write(targets, "data/targets.geojson")
targets <- st_read("data/targets.geojson")
peer_medians <- read_csv("data/peer_medians.csv")
dallas_smallgeo <- read_csv("data/dallas_smallgeo.csv", col_types = c("GEOID" = "character")) %>%
left_join(
targets
) %>%
st_as_sf()
metrics <- read_csv("data/smallest_geo_available.csv") %>%
rowwise() %>%
mutate(
target = Metric,
sdf = list(filter(dallas_smallgeo, Metric == target))
) %>%
ungroup() %>%
select(-target)
acs_tract <- tidycensus::get_acs("tract",
variables = c("pop_total" = "S1701_C01_001",
"pov_total" = "S1701_C02_001",
"pop_black" = "B01001B_001",
"pop_native" = "B01001C_001",
"pop_asian" = "B01001D_001",
"pop_pacific" = "B01001E_001",
"pop_otherrace" = "B01001F_001",
"pop_multirace" = "B01001G_001",
"pop_white" = "B01001H_001",
"pop_latino" = "B01001I_001"),
year = 2022,
state = "TX",
county = c("Dallas", "Denton", "Collin County", "Kaufman", "Rockwall"),
geometry = TRUE,
output = "wide") %>%
select(-ends_with("M")) %>%
rename_with(~gsub("E$", "", .), ends_with("E")) %>%
mutate(
poppct_black = pop_black / pop_total,
poppct_asian = pop_asian / pop_total,
poppct_white = pop_white / pop_total,
poppct_latino = pop_latino / pop_total,
tract_sqmi = as.numeric(units::set_units(sf::st_area(geometry), mi^2)),
pop_density = pop_total/tract_sqmi,
pop_density_cut = ifelse(pop_density > 25000, 25000, pop_density)
# poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total,
) %>%
mutate(
max_race_info = pmap(
list(poppct_black, poppct_asian, poppct_white, poppct_latino),
~ {
percentages <- c(...);
names(percentages) <- c("Black", "Asian", "White", "Hispanic/Latino");
sorted <- sort(percentages, decreasing = TRUE);
max_race <- names(sorted)[1];
second_max_race <- names(sorted)[2];
max_diff <- sorted[1] - sorted[2];
list(max_race, max_diff)
}
)
) %>%
unnest_wider(max_race_info, names_sep = "_") %>%
rename(
pop_largestrace = max_race_info_1,
pop_racediff = max_race_info_2
) %>%
sf::st_as_sf() %>%
sf::st_set_crs(4269)
acs_place <- tidycensus::get_acs("place",
variables = c("pop_total" = "S1701_C01_001",
"pov_total" = "S1701_C02_001",
"pop_black" = "B01001B_001",
"pop_native" = "B01001C_001",
"pop_asian" = "B01001D_001",
"pop_pacific" = "B01001E_001",
"pop_otherrace" = "B01001F_001",
"pop_multirace" = "B01001G_001",
"pop_white" = "B01001H_001",
"pop_latino" = "B01001I_001"),
year = 2022,
state = "TX",
geometry = TRUE,
output = "wide") %>%
filter(NAME == "Dallas city, Texas") %>%
select(-ends_with("M")) %>%
rename_with(~gsub("E$", "", .), ends_with("E")) %>%
mutate(
poppct_black = pop_black / pop_total,
poppct_asian = pop_asian / pop_total,
poppct_white = pop_white / pop_total,
poppct_latino = pop_latino / pop_total,
# poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total
) %>%
mutate(geometry = sf::st_difference(geometry, dallas_remove))
dallas_tracts <- sf::st_join(acs_tract, acs_place, sf::st_intersects, suffix = c("", "_DAL")) %>%
filter(!is.na(NAM_DAL)) %>%
select(geometry, everything()) %>%
sf::st_simplify(dTolerance = 1) %>%
mutate(
tract_area = sf::st_area(geometry)
) %>%
rowwise() %>%
mutate(
intersection = tryCatch(
{
inter = sf::st_intersection(geometry, acs_place$geometry[1])
if (length(inter) == 0) { NA } else { inter }
},
error = function(e) NA
),
intersection_area = ifelse(is.na(intersection), 0, sf::st_area(intersection)),
area_proportion = as.numeric(intersection_area / tract_area),
tract_name = str_remove(NAM, ";.*")
) %>%
ungroup() %>%
filter(area_proportion >= 0.20)
# %>%  pivot_longer(4:(which(names(.) == "GEOID_DAL") - 1), names_to = "variable")
bounds <- as.vector(sf::st_bbox(dallas_tracts))
View(metrics)
View(metrics)
View(metrics[[6]][[5]])
View(metrics[[6]][[1]])
