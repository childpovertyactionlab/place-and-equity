stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup =
paste0(
"<i>", metrics$sdf[[1]]$NAME, "</i><br/>",
"<b>Pct in overcrowded housing:</b> ", scales::percent(metrics$sdf[[1]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "rent-burden",
data = metrics$sdf[[2]],
fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup =
paste0(
"<i>", metrics$sdf[[2]]$NAME, "</i><br/>",
"<b>Pct households with rent more than 30% of income:</b> ", scales::percent(metrics$sdf[[2]]$all, accuracy = 0.1)
)
) %>%
# addPolygons(
#   group = "unhoused-rates",
#   data = metrics$sdf[[3]],
#   fillColor = ~colorNumeric(palette = binning(3, 3)$palette, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),
#   fillOpacity = 0.5,
#   stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
#   highlight = highlightOptions(
#               opacity = 0.5,
#               bringToFront = TRUE,
#               sendToBack = TRUE),
#   popup = paste0(
#       "<i>", metrics$sdf[[3]]$NAME, "</i><br/>",
#       "<b>Pct individuals experiencing homelessness:</b> ", scales::percent(metrics$sdf[[3]]$all, accuracy = 0.1)
#     )
# ) %>%
addPolygons(
group = "uninsured-population",
data = metrics$sdf[[4]],
fillColor = ~colorNumeric(palette = binning(4, 4)$palette, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[4]]$NAME, "</i><br/>",
"<b>Pct individuals uninsured:</b> ", scales::percent(metrics$sdf[[4]]$all, accuracy = 0.1)
)
) %>%
#
# addPolygons(
#   group = metrics$Metric[5],
#   data = metrics$sdf[[5]],
#   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),
#   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,
#   weight = 1,
#   color = "#FFFFFF",
#   # dashArray = "3",
#   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {
#     htmltools::HTML(paste0(
#       "<i>", metrics$sdf[[5]]$NAME, "</i><br/>",
#       "<b>Life expectancy:</b> ", scales::percent(metrics$sdf[[5]]$all)
#     ))
#   }),
#   labelOptions = labelOptions(direction = 'auto', html = TRUE)
# ) %>%
addPolygons(
group = "health-index",
data = metrics$sdf[[6]],
fillColor = ~colorNumeric(palette = binning(6, 6)$palette, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[6]]$NAME, "</i><br/>",
"<b>Health index:</b> ", scales::number(metrics$sdf[[6]]$all, accuracy = 0.001), "<br/>",
"<br/>",
"<i><sup>*Lower index score is better</sup></i>"
)
) %>%
addPolygons(
group = "pub-commute-long",
data = metrics$sdf[[7]],
fillColor = ~colorNumeric(palette = binning(7, 7)$palette, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[7]]$NAME, "</i><br/>",
"<b>Percent longer public commute than 45 min.:</b> ", scales::percent(metrics$sdf[[7]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "priv-commute-long",
data = metrics$sdf[[8]],
fillColor = ~colorNumeric(palette = binning(8, 8)$palette, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[8]]$NAME, "</i><br/>",
"<b>Percent longer private commute than 45 min.:</b> ", scales::percent(metrics$sdf[[8]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "pub-commute",
data = metrics$sdf[[9]],
fillColor = ~colorNumeric(palette = binning(9, 9)$palette, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[9]]$NAME, "</i><br/>",
"<b>Percent using public commute:</b> ", scales::percent(metrics$sdf[[9]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "priv-commute",
data = metrics$sdf[[10]],
fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[10]]$NAME, "</i><br/>",
"<b>Percent using private commute:</b> ", scales::percent(metrics$sdf[[10]]$all, accuracy = 0.1)
)
) %>%
# Map bounds
setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
# Layers control
addLayersControl(
baseGroups = c("None", "overcrowded-housing", "rent-burden", "unhoused-rates", "uninsured-population", "life-expectancy", "health-index", "pub-commute-long", "priv-commute-long", "pub-commute", "priv-commute", "no-vehicle", metrics$Metric)
) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
var map_metrics = this;
function toggleLayer(layerName) {
var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
return $(this).next('span').text().trim() === layerName;
});
if(input.length) {
input[0].click();
}
};
$('#overcrowded-housing').on('click', function() {
toggleLayer('overcrowded-housing');
});
$('#rent-burden').on('click', function() {
toggleLayer('rent-burden');
});
$('#unhoused-rates').on('click', function() {
toggleLayer('unhoused-rates');
});
$('#uninsured-population').on('click', function() {
toggleLayer('uninsured-population');
});
$('#health-index').on('click', function() {
toggleLayer('health-index');
});
$('#pub-commute-long').on('click', function() {
toggleLayer('pub-commute-long');
});
$('#priv-commute-long').on('click', function() {
toggleLayer('priv-commute-long');
});
$('#pub-commute').on('click', function() {
toggleLayer('pub-commute');
});
$('#priv-commute').on('click', function() {
toggleLayer('priv-commute');
});
$('#no-vehicle').on('click', function() {
toggleLayer('no-vehicle');
});
}
"))
metrics[[3]]
metrics$sdf[[3]]
metrics$sdf[[3]]$all
paste0("1/", number(metrics$sdf[[3]]$all, accuracy = 1))
paste0("1/", scales::number(metrics$sdf[[3]]$all, accuracy = 1))
paste0("1/", scales::number(1/metrics$sdf[[3]]$all, accuracy = 1))
1/metrics$sdf[[3]]$all
library(tidyverse)
library(ggplot2)
library(sf)
library(leaflet)
library(kableExtra)
library(cpaltemplates)
library(highcharter)
city_list <- list("Dallas, TX", "San Diego, CA", "Austin, TX", "Charlotte, NC", "Washington, DC", "Phoenix, AZ", "San Antonio, TX", "Atlanta, GA", "Houston, TX", "Miami, FL", "Philadelphia, PA")
geographies <- c(
"Block group" = 1,
"Tract" = 2,
"PUMA" = 3,
"Place" = 4,
"CSA" = 5,
"County" = 6
)
city_geometry <- tigris::places(year = 2022, cb = TRUE)
dallas_remove <- sf::st_sfc(sf::st_polygon(list(matrix(c(
-96.6, 32.75,
-96.6, 33.1,
-96.3, 33.1,
-96.3, 32.75,
-96.6, 32.75
), ncol = 2, byrow = TRUE))), crs = sf::st_crs(city_geometry))
# target_cities <- city_geometry %>%
#   mutate(cityst = paste0(NAME, ", ", STUSPS)) %>%
#   filter(cityst %in% city_list) %>%
#   mutate(geometry = if_else(cityst == "Dallas, TX",
#                             sf::st_difference(geometry, dallas_remove),
#                             geometry)) %>%
#   mutate(geometry = sf::st_simplify(geometry, dTolerance = 1))
target_cities <- st_read("data/target_cities.geojson")
# city_plots <- lapply(target_cities$cityst, function(city) {
#   city_data <- target_cities %>% filter(cityst == city)
#   ggplot(city_data) +
#     geom_sf(fill = "grey10", color = NA) +
#     theme_void()
# })
fips_codes <- tidycensus::fips_codes %>%
mutate(CountyFIPS = paste0(state_code, county_code))
target_counties <- st_read("data/target_counties.geojson")
target_metros <- st_read("data/target_metros.geojson")
target_tracts <- st_read("data/target_tracts.geojson")
# target_sds_TX <- st_read("data/target_sds_TX.geojson")
# targets <- bind_rows(
#   target_counties %>%
#     mutate(
#       Geography = "County"
#     ) %>%
#     select(
#       Geography,
#       GEOID = CountyFIPS,
#       NAME = NAME.x,
#       City = cityst,
#       geometry
#     ),
#   target_metros %>%
#     mutate(
#       Geography = "CSA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_cities %>%
#     mutate(
#       Geography = "Place"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_PUMAs %>%
#     mutate(
#       Geography = "PUMA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_tracts %>%
#     mutate(
#       Geography = "Tract"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     ),
#   target_2019tracts %>%
#     mutate(
#       Geography = "Tract (2019)"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     )
# )
# st_write(targets, "data/targets.geojson")
targets <- st_read("data/targets.geojson")
peer_medians <- read_csv("data/peer_medians.csv")
dallas_smallgeo <- read_csv("data/dallas_smallgeo.csv", col_types = c("GEOID" = "character")) %>%
left_join(
targets
) %>%
st_as_sf()
metrics <- read_csv("data/smallest_geo_available.csv") %>%
rowwise() %>%
mutate(
target = Metric,
sdf = list(filter(dallas_smallgeo, Metric == target))
) %>%
ungroup() %>%
select(-target)
acs_tract <- tidycensus::get_acs("tract",
variables = c("pop_total" = "S1701_C01_001",
"pov_total" = "S1701_C02_001",
"pop_black" = "B01001B_001",
"pop_native" = "B01001C_001",
"pop_asian" = "B01001D_001",
"pop_pacific" = "B01001E_001",
"pop_otherrace" = "B01001F_001",
"pop_multirace" = "B01001G_001",
"pop_white" = "B01001H_001",
"pop_latino" = "B01001I_001"),
year = 2022,
state = "TX",
county = c("Dallas", "Denton", "Collin County", "Kaufman", "Rockwall"),
geometry = TRUE,
output = "wide") %>%
select(-ends_with("M")) %>%
rename_with(~gsub("E$", "", .), ends_with("E")) %>%
mutate(
poppct_black = pop_black / pop_total,
poppct_asian = pop_asian / pop_total,
poppct_white = pop_white / pop_total,
poppct_latino = pop_latino / pop_total,
tract_sqmi = as.numeric(units::set_units(sf::st_area(geometry), mi^2)),
pop_density = pop_total/tract_sqmi,
pop_density_cut = ifelse(pop_density > 25000, 25000, pop_density)
# poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total,
) %>%
mutate(
max_race_info = pmap(
list(poppct_black, poppct_asian, poppct_white, poppct_latino),
~ {
percentages <- c(...);
names(percentages) <- c("Black", "Asian", "White", "Hispanic/Latino");
sorted <- sort(percentages, decreasing = TRUE);
max_race <- names(sorted)[1];
second_max_race <- names(sorted)[2];
max_diff <- sorted[1] - sorted[2];
list(max_race, max_diff)
}
)
) %>%
unnest_wider(max_race_info, names_sep = "_") %>%
rename(
pop_largestrace = max_race_info_1,
pop_racediff = max_race_info_2
) %>%
sf::st_as_sf() %>%
sf::st_set_crs(4269)
acs_place <- tidycensus::get_acs("place",
variables = c("pop_total" = "S1701_C01_001",
"pov_total" = "S1701_C02_001",
"pop_black" = "B01001B_001",
"pop_native" = "B01001C_001",
"pop_asian" = "B01001D_001",
"pop_pacific" = "B01001E_001",
"pop_otherrace" = "B01001F_001",
"pop_multirace" = "B01001G_001",
"pop_white" = "B01001H_001",
"pop_latino" = "B01001I_001"),
year = 2022,
state = "TX",
geometry = TRUE,
output = "wide") %>%
filter(NAME == "Dallas city, Texas") %>%
select(-ends_with("M")) %>%
rename_with(~gsub("E$", "", .), ends_with("E")) %>%
mutate(
poppct_black = pop_black / pop_total,
poppct_asian = pop_asian / pop_total,
poppct_white = pop_white / pop_total,
poppct_latino = pop_latino / pop_total,
# poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total
) %>%
mutate(geometry = sf::st_difference(geometry, dallas_remove))
dallas_tracts <- sf::st_join(acs_tract, acs_place, sf::st_intersects, suffix = c("", "_DAL")) %>%
filter(!is.na(NAM_DAL)) %>%
select(geometry, everything()) %>%
sf::st_simplify(dTolerance = 1) %>%
mutate(
tract_area = sf::st_area(geometry)
) %>%
rowwise() %>%
mutate(
intersection = tryCatch(
{
inter = sf::st_intersection(geometry, acs_place$geometry[1])
if (length(inter) == 0) { NA } else { inter }
},
error = function(e) NA
),
intersection_area = ifelse(is.na(intersection), 0, sf::st_area(intersection)),
area_proportion = as.numeric(intersection_area / tract_area),
tract_name = str_remove(NAM, ";.*")
) %>%
ungroup() %>%
filter(area_proportion >= 0.20)
# %>%  pivot_longer(4:(which(names(.) == "GEOID_DAL") - 1), names_to = "variable")
bounds <- as.vector(sf::st_bbox(dallas_tracts))
# hi taylor
#### palettes ####
palette <- cpaltemplates::palette_cpal_main
palette <- c(palette[-1], palette[1])
binning <- function(n, color, na.color = "#333333") {
color = if (color %% 8 == 0) {8} else {color %% 8}
uniq <- unique(colorBin(
bins = 5,
colorRampPalette(c("#FFFFFF", palette[[1]]))(5),
na.color = na.color,
pretty = TRUE,
domain = metrics$sdf[[n]]$all
)(metrics$sdf[[n]]$all))
if (na.color %in% uniq) {n_bins <- length(uniq) - 1} else {n_bins <- length(uniq)}
bin_palette <- colorRampPalette(c("#FFFFFF", palette[[color]]))(n_bins)
list(values = colorBin(
bins = n_bins,
bin_palette,
na.color = na.color,
pretty = TRUE,
domain = metrics$sdf[[n]]$all
)(metrics$sdf[[n]]$all),
breaks = classInt::classIntervals(
metrics$sdf[[n]]$all,
style = "pretty",
n = n_bins
)$brks,
n_bins = n_bins,
palette = bin_palette
)
}
#### bins_hc ####
hc_cpal <- hc_theme(
chart = list(
backgroundColor = 'transparent',
style = list(
fontFamily = "Inter"
)
)
)
bins_hc <- function(n, color, title = NULL, bin_labels = NULL, pct = FALSE, hover = NULL, axis_label = NULL, na.color = "#333333") {
color = if (color %% 8 == 0) {8} else {color %% 8}
bin_data <- binning(n, color, na.color)
breaks <- bin_data$breaks
if (!is.null(bin_labels)) bin_labels <- bin_labels else if (pct) {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(scales::percent(breaks[i]), scales::percent(breaks[i+1]), sep = "-"))} else {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(breaks[i], breaks[i+1], sep = "-"))} %>% as.vector()
bins <- bin_data$values %>%
table() %>%
as.data.frame() %>%
filter(`.` != "#333333") %>%
mutate(color = factor(`.`, levels = bin_data$palette)) %>%
select(-`.`) %>%
arrange(color) %>%
bind_cols(label = bin_labels)
chart <- bins %>%
hchart(
'column',
hcaes(x = label, y = Freq, color = color)
) %>%
hc_size(height = "25vh", width = "100%") %>%
hc_xAxis(title = FALSE, labels = list(enabled = TRUE), gridLineWidth = 0, reversed = TRUE) %>%
# hc_yAxis(title = ifelse(is.null(axis_label), FALSE, list(text = axis_label)), labels = list(enabled = FALSE), gridLineWidth = 0) %>%
hc_yAxis(title = list(text = axis_label), labels = list(enabled = FALSE), gridLineWidth = 0) %>%
hc_chart(plotBackgroundColor = NULL, plotBorderWidth = 0, spacing = 10, inverted=TRUE) %>%
hc_plotOptions(column = list(borderWidth = 1, borderColor = 'lightgrey', pointWidth = 30,
pointPadding = 0, groupPadding = 0),
states = list(hover = list(
enabled = TRUE,
brightness = -0.2))
) %>%
hc_legend(enabled = FALSE) %>%
hc_tooltip(formatter = JS("function() {
return this.x + ': ' + this.y;
}")) %>%
hc_title(text = title) %>%
hc_add_theme(hc_cpal)
chart
}
View(metrics)
