breaks <- bin_data$breaks
if (!is.null(bin_labels)) bin_labels <- bin_labels else if (pct) {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(scales::percent(breaks[i]), scales::percent(breaks[i+1]), sep = "-"))} else {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(breaks[i], breaks[i+1], sep = "-"))} %>% as.vector()
bins <- bin_data$values %>%
table() %>%
as.data.frame() %>%
filter(`.` != "#333333") %>%
mutate(color = factor(`.`, levels = bin_data$palette)) %>%
select(-`.`) %>%
arrange(color) %>%
bind_cols(label = bin_labels)
chart <- bins %>%
hchart(
'column',
hcaes(x = label, y = Freq, color = color)
) %>%
hc_size(height = "25vh", width = "100%") %>%
hc_xAxis(title = FALSE, labels = list(enabled = TRUE), gridLineWidth = 0, reversed = TRUE) %>%
# hc_yAxis(title = ifelse(is.null(axis_label), FALSE, list(text = axis_label)), labels = list(enabled = FALSE), gridLineWidth = 0) %>%
hc_yAxis(title = list(text = axis_label), labels = list(enabled = FALSE), gridLineWidth = 0) %>%
hc_chart(plotBackgroundColor = NULL, plotBorderWidth = 0, spacing = 10, inverted=TRUE) %>%
hc_plotOptions(column = list(borderWidth = 1, borderColor = 'lightgrey', pointWidth = 30,
pointPadding = 0, groupPadding = 0),
states = list(hover = list(
enabled = TRUE,
brightness = -0.2))
) %>%
hc_legend(enabled = FALSE) %>%
hc_tooltip(formatter = JS("function() {
return this.x + ': ' + this.y;
}")) %>%
hc_title(text = title) %>%
hc_add_theme(hc_cpal)
chart
}
bins_hc(n=7, color=7, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
bins_hc(n=7, color=7, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
bins_hc(n=4, color=4, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. tracts")
leaflet(data = dallas_smallgeo,
elementId = "map-hd",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)) %>%
# Add base
addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
# City outline default
addPolygons(
# group = "none",
data = acs_place,
fillColor = "#333333",
fillOpacity = 0.05, weight = 2, color = "#333333",
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F)
) %>%
# County outline default
addPolygons(
# group = "none",
data = target_counties %>% filter(CountyFIPS == 48113),
fillColor = "#333333",
fillOpacity = 0.0, weight = 2, color = "#333333",
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F)
) %>%
addPolygons(
group = "overcrowded-housing",
data = metrics$sdf[[1]],
fillColor = ~colorBin(palette = binning(1, 1)$palette, domain = c(0, max(metrics$sdf[[1]]$all, na.rm = TRUE)))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup =
paste0(
"<i>", metrics$sdf[[1]]$NAME, "</i><br/>",
"<b>Pct in overcrowded housing:</b> ", scales::percent(metrics$sdf[[1]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "rent-burden",
data = metrics$sdf[[2]],
fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup =
paste0(
"<i>", metrics$sdf[[2]]$NAME, "</i><br/>",
"<b>Pct households with rent more than 30% of income:</b> ", scales::percent(metrics$sdf[[2]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "unhoused-rates",
data = metrics$sdf[[3]],
fillColor = ~colorNumeric(palette = binning(3, 3)$palette, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[3]]$NAME, "</i><br/>",
"<b>Pct individuals experiencing homelessness:</b> ", scales::percent(metrics$sdf[[3]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "uninsured-population",
data = metrics$sdf[[4]],
fillColor = ~colorNumeric(palette = binning(4, 4)$palette, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[4]]$NAME, "</i><br/>",
"<b>Pct individuals uninsured:</b> ", scales::percent(metrics$sdf[[4]]$all, accuracy = 0.1)
)
) %>%
#
# addPolygons(
#   group = metrics$Metric[5],
#   data = metrics$sdf[[5]],
#   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),
#   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,
#   weight = 1,
#   color = "#FFFFFF",
#   # dashArray = "3",
#   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {
#     htmltools::HTML(paste0(
#       "<i>", metrics$sdf[[5]]$NAME, "</i><br/>",
#       "<b>Life expectancy:</b> ", scales::percent(metrics$sdf[[5]]$all)
#     ))
#   }),
#   labelOptions = labelOptions(direction = 'auto', html = TRUE)
# ) %>%
addPolygons(
group = "health-index",
data = metrics$sdf[[6]],
fillColor = ~colorNumeric(palette = binning(6, 6)$palette, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[6]]$NAME, "</i><br/>",
"<b>Health index:</b> ", scales::number(metrics$sdf[[6]]$all, accuracy = 0.001), "<br/>",
"<br/>",
"<i><sup>*Lower index score is better</sup></i>"
)
) %>%
addPolygons(
group = "pub-commute-long",
data = metrics$sdf[[7]],
fillColor = ~colorNumeric(palette = binning(7, 7)$palette, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[7]]$NAME, "</i><br/>",
"<b>Percent longer public commute than 45 min.:</b> ", scales::percent(metrics$sdf[[7]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "priv-commute-long",
data = metrics$sdf[[8]],
fillColor = ~colorNumeric(palette = binning(8, 8)$palette, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[8]]$NAME, "</i><br/>",
"<b>Percent longer private commute than 45 min.:</b> ", scales::percent(metrics$sdf[[8]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "pub-commute",
data = metrics$sdf[[9]],
fillColor = ~colorNumeric(palette = binning(9, 9)$palette, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[9]]$NAME, "</i><br/>",
"<b>Percent using public commute:</b> ", scales::percent(metrics$sdf[[9]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "priv-commute",
data = metrics$sdf[[10]],
fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[10]]$NAME, "</i><br/>",
"<b>Percent using private commute:</b> ", scales::percent(metrics$sdf[[10]]$all, accuracy = 0.1)
)
) %>%
# Map bounds
setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
# Layers control
addLayersControl(
baseGroups = c("None", "overcrowded-housing", "rent-burden", "unhoused-rates", "uninsured-population", "life-expectancy", "health-index", "pub-commute-long", "priv-commute-long", "pub-commute", "priv-commute", "no-vehicle", metrics$Metric)
) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
var map_metrics = this;
function toggleLayer(layerName) {
var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
return $(this).next('span').text().trim() === layerName;
});
if(input.length) {
input[0].click();
}
};
$('#overcrowded-housing').on('click', function() {
toggleLayer('overcrowded-housing');
});
$('#rent-burden').on('click', function() {
toggleLayer('rent-burden');
});
$('#unhoused-rates').on('click', function() {
toggleLayer('unhoused-rates');
});
$('#uninsured-population').on('click', function() {
toggleLayer('uninsured-population');
});
$('#health-index').on('click', function() {
toggleLayer('health-index');
});
$('#pub-commute-long').on('click', function() {
toggleLayer('pub-commute-long');
});
$('#priv-commute-long').on('click', function() {
toggleLayer('priv-commute-long');
});
$('#pub-commute').on('click', function() {
toggleLayer('pub-commute');
});
$('#priv-commute').on('click', function() {
toggleLayer('priv-commute');
});
$('#no-vehicle').on('click', function() {
toggleLayer('no-vehicle');
});
}
"))
leaflet(data = dallas_smallgeo,
elementId = "map-hd",
options = leafletOptions(
zoomSnap = 0.5,
zoomDelta = 0.5,
minZoom = 9.5,
wheelPxPerZoomLevel = 120
)) %>%
# Add base
addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
# City outline default
addPolygons(
# group = "none",
data = acs_place,
fillColor = "#333333",
fillOpacity = 0.05, weight = 2, color = "#333333",
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F)
) %>%
# County outline default
addPolygons(
# group = "none",
data = target_counties %>% filter(CountyFIPS == 48113),
fillColor = "#333333",
fillOpacity = 0.0, weight = 2, color = "#333333",
opacity = 0.1,
smoothFactor = 1,
options = pathOptions(clickable = F, interactive = F)
) %>%
addPolygons(
group = "overcrowded-housing",
data = metrics$sdf[[1]],
fillColor = ~colorBin(palette = binning(1, 1)$palette, domain = c(0, max(metrics$sdf[[1]]$all, na.rm = TRUE)))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup =
paste0(
"<i>", metrics$sdf[[1]]$NAME, "</i><br/>",
"<b>Pct in overcrowded housing:</b> ", scales::percent(metrics$sdf[[1]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "rent-burden",
data = metrics$sdf[[2]],
fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup =
paste0(
"<i>", metrics$sdf[[2]]$NAME, "</i><br/>",
"<b>Pct households with rent more than 30% of income:</b> ", scales::percent(metrics$sdf[[2]]$all, accuracy = 0.1)
)
) %>%
# addPolygons(
#   group = "unhoused-rates",
#   data = metrics$sdf[[3]],
#   fillColor = ~colorNumeric(palette = binning(3, 3)$palette, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),
#   fillOpacity = 0.5,
#   stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
#   highlight = highlightOptions(
#               opacity = 0.5,
#               bringToFront = TRUE,
#               sendToBack = TRUE),
#   popup = paste0(
#       "<i>", metrics$sdf[[3]]$NAME, "</i><br/>",
#       "<b>Pct individuals experiencing homelessness:</b> ", scales::percent(metrics$sdf[[3]]$all, accuracy = 0.1)
#     )
# ) %>%
addPolygons(
group = "uninsured-population",
data = metrics$sdf[[4]],
fillColor = ~colorNumeric(palette = binning(4, 4)$palette, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[4]]$NAME, "</i><br/>",
"<b>Pct individuals uninsured:</b> ", scales::percent(metrics$sdf[[4]]$all, accuracy = 0.1)
)
) %>%
#
# addPolygons(
#   group = metrics$Metric[5],
#   data = metrics$sdf[[5]],
#   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),
#   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,
#   weight = 1,
#   color = "#FFFFFF",
#   # dashArray = "3",
#   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {
#     htmltools::HTML(paste0(
#       "<i>", metrics$sdf[[5]]$NAME, "</i><br/>",
#       "<b>Life expectancy:</b> ", scales::percent(metrics$sdf[[5]]$all)
#     ))
#   }),
#   labelOptions = labelOptions(direction = 'auto', html = TRUE)
# ) %>%
addPolygons(
group = "health-index",
data = metrics$sdf[[6]],
fillColor = ~colorNumeric(palette = binning(6, 6)$palette, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[6]]$NAME, "</i><br/>",
"<b>Health index:</b> ", scales::number(metrics$sdf[[6]]$all, accuracy = 0.001), "<br/>",
"<br/>",
"<i><sup>*Lower index score is better</sup></i>"
)
) %>%
addPolygons(
group = "pub-commute-long",
data = metrics$sdf[[7]],
fillColor = ~colorNumeric(palette = binning(7, 7)$palette, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[7]]$NAME, "</i><br/>",
"<b>Percent longer public commute than 45 min.:</b> ", scales::percent(metrics$sdf[[7]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "priv-commute-long",
data = metrics$sdf[[8]],
fillColor = ~colorNumeric(palette = binning(8, 8)$palette, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[8]]$NAME, "</i><br/>",
"<b>Percent longer private commute than 45 min.:</b> ", scales::percent(metrics$sdf[[8]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "pub-commute",
data = metrics$sdf[[9]],
fillColor = ~colorNumeric(palette = binning(9, 9)$palette, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[9]]$NAME, "</i><br/>",
"<b>Percent using public commute:</b> ", scales::percent(metrics$sdf[[9]]$all, accuracy = 0.1)
)
) %>%
addPolygons(
group = "priv-commute",
data = metrics$sdf[[10]],
fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
fillOpacity = 0.5,
stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
highlight = highlightOptions(
opacity = 0.5,
bringToFront = TRUE,
sendToBack = TRUE),
popup = paste0(
"<i>", metrics$sdf[[10]]$NAME, "</i><br/>",
"<b>Percent using private commute:</b> ", scales::percent(metrics$sdf[[10]]$all, accuracy = 0.1)
)
) %>%
# Map bounds
setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
# Layers control
addLayersControl(
baseGroups = c("None", "overcrowded-housing", "rent-burden", "unhoused-rates", "uninsured-population", "life-expectancy", "health-index", "pub-commute-long", "priv-commute-long", "pub-commute", "priv-commute", "no-vehicle", metrics$Metric)
) %>%
htmlwidgets::onRender(paste0("
function(el, x) {
var map_metrics = this;
function toggleLayer(layerName) {
var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
return $(this).next('span').text().trim() === layerName;
});
if(input.length) {
input[0].click();
}
};
$('#overcrowded-housing').on('click', function() {
toggleLayer('overcrowded-housing');
});
$('#rent-burden').on('click', function() {
toggleLayer('rent-burden');
});
$('#unhoused-rates').on('click', function() {
toggleLayer('unhoused-rates');
});
$('#uninsured-population').on('click', function() {
toggleLayer('uninsured-population');
});
$('#health-index').on('click', function() {
toggleLayer('health-index');
});
$('#pub-commute-long').on('click', function() {
toggleLayer('pub-commute-long');
});
$('#priv-commute-long').on('click', function() {
toggleLayer('priv-commute-long');
});
$('#pub-commute').on('click', function() {
toggleLayer('pub-commute');
});
$('#priv-commute').on('click', function() {
toggleLayer('priv-commute');
});
$('#no-vehicle').on('click', function() {
toggleLayer('no-vehicle');
});
}
"))
metrics[[3]]
metrics$sdf[[3]]
metrics$sdf[[3]]$all
paste0("1/", number(metrics$sdf[[3]]$all, accuracy = 1))
paste0("1/", scales::number(metrics$sdf[[3]]$all, accuracy = 1))
paste0("1/", scales::number(1/metrics$sdf[[3]]$all, accuracy = 1))
1/metrics$sdf[[3]]$all
