---
pagetitle: "Place & Equity"
echo: false
toc: false
---

```{r setup, output=F}
library(tidyverse)
library(ggplot2)
library(sf)
library(leaflet)
library(kableExtra)
library(cpaltemplates)

city_list <- list("Dallas, TX", "San Diego, CA", "Austin, TX", "Charlotte, NC", "Washington, DC", "Phoenix, AZ", "San Antonio, TX", "Atlanta, GA", "Houston, TX", "Miami, FL", "Philadelphia, PA")

geographies <- c(
  "Block group" = 1,
  "Tract" = 2,
  "PUMA" = 3,
  "Place" = 4,
  "CSA" = 5,
  "County" = 6
)

city_geometry <- tigris::places(year = 2022, cb = TRUE)

dallas_remove <- sf::st_sfc(sf::st_polygon(list(matrix(c(
  -96.6, 32.75,
  -96.6, 33.1,
  -96.3, 33.1,
  -96.3, 32.75,
  -96.6, 32.75
), ncol = 2, byrow = TRUE))), crs = sf::st_crs(city_geometry))

# target_cities <- city_geometry %>%
#   mutate(cityst = paste0(NAME, ", ", STUSPS)) %>%
#   filter(cityst %in% city_list) %>%
#   mutate(geometry = if_else(cityst == "Dallas, TX", 
#                             sf::st_difference(geometry, dallas_remove), 
#                             geometry)) %>%
#   mutate(geometry = sf::st_simplify(geometry, dTolerance = 1))
target_cities <- st_read("data/target_cities.geojson")

# city_plots <- lapply(target_cities$cityst, function(city) {
#   city_data <- target_cities %>% filter(cityst == city)
#   ggplot(city_data) + 
#     geom_sf(fill = "grey10", color = NA) +
#     theme_void()
# })

fips_codes <- tidycensus::fips_codes %>%
  mutate(CountyFIPS = paste0(state_code, county_code))

target_counties <- st_read("data/target_counties.geojson")
target_metros <- st_read("data/target_metros.geojson")
target_tracts <- st_read("data/target_tracts.geojson")
# target_sds_TX <- st_read("data/target_sds_TX.geojson")


# targets <- bind_rows(
#   target_counties %>%
#     mutate(
#       Geography = "County"
#     ) %>%
#     select(
#       Geography,
#       GEOID = CountyFIPS,
#       NAME = NAME.x,
#       City = cityst,
#       geometry
#     ),
#   target_metros %>%
#     mutate(
#       Geography = "CSA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_cities %>%
#     mutate(
#       Geography = "Place"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_PUMAs %>%
#     mutate(
#       Geography = "PUMA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_tracts %>%
#     mutate(
#       Geography = "Tract"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     ),
#   target_2019tracts %>%
#     mutate(
#       Geography = "Tract (2019)"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     )
# )
# st_write(targets, "data/targets.geojson")

targets <- st_read("data/targets.geojson")

peer_medians <- read_csv("data/peer_medians.csv")

dallas_smallgeo <- read_csv("data/dallas_smallgeo.csv", col_types = c("GEOID" = "character")) %>%
  left_join(
    targets
  ) %>%
  st_as_sf()

metrics <- read_csv("data/smallest_geo_available.csv") %>%
  rowwise() %>%
  mutate(
    target = Metric,
    sdf = list(filter(dallas_smallgeo, Metric == target))
  ) %>%
  ungroup() %>%
  select(-target)

acs_tract <- tidycensus::get_acs("tract",
                                 variables = c("pop_total" = "S1701_C01_001", 
                                               "pov_total" = "S1701_C02_001", 
                                               "pop_black" = "B01001B_001", 
                                               "pop_native" = "B01001C_001", 
                                               "pop_asian" = "B01001D_001", 
                                               "pop_pacific" = "B01001E_001", 
                                               "pop_otherrace" = "B01001F_001", 
                                               "pop_multirace" = "B01001G_001", 
                                               "pop_white" = "B01001H_001", 
                                               "pop_latino" = "B01001I_001"),
                                 year = 2022,
                                 state = "TX",
                                 county = c("Dallas", "Denton", "Collin County", "Kaufman", "Rockwall"),
                                 geometry = TRUE,
                                 output = "wide") %>%
  select(-ends_with("M")) %>%
  rename_with(~gsub("E$", "", .), ends_with("E")) %>%
  mutate(
    poppct_black = pop_black / pop_total,
    poppct_asian = pop_asian / pop_total,
    poppct_white = pop_white / pop_total,
    poppct_latino = pop_latino / pop_total,
    tract_sqmi = as.numeric(units::set_units(sf::st_area(geometry), mi^2)),
    pop_density = pop_total/tract_sqmi,
    pop_density_cut = ifelse(pop_density > 25000, 25000, pop_density)
    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total,
  ) %>%
  mutate(
    max_race_info = pmap(
      list(poppct_black, poppct_asian, poppct_white, poppct_latino), 
      ~ {
        percentages <- c(...); 
        names(percentages) <- c("Black", "Asian", "White", "Hispanic/Latino");
        sorted <- sort(percentages, decreasing = TRUE); 
        max_race <- names(sorted)[1]; 
        second_max_race <- names(sorted)[2]; 
        max_diff <- sorted[1] - sorted[2]; 
        list(max_race, max_diff)
      }
    )
  ) %>%
  unnest_wider(max_race_info, names_sep = "_") %>%
  rename(
    pop_largestrace = max_race_info_1,
    pop_racediff = max_race_info_2
  ) %>%
  sf::st_as_sf() %>%
  sf::st_set_crs(4269)

acs_place <- tidycensus::get_acs("place",
                                 variables = c("pop_total" = "S1701_C01_001", 
                                               "pov_total" = "S1701_C02_001", 
                                               "pop_black" = "B01001B_001", 
                                               "pop_native" = "B01001C_001", 
                                               "pop_asian" = "B01001D_001", 
                                               "pop_pacific" = "B01001E_001", 
                                               "pop_otherrace" = "B01001F_001", 
                                               "pop_multirace" = "B01001G_001", 
                                               "pop_white" = "B01001H_001", 
                                               "pop_latino" = "B01001I_001"),
                                 year = 2022,
                                 state = "TX",
                                 geometry = TRUE,
                                 output = "wide") %>%
  filter(NAME == "Dallas city, Texas") %>%
  select(-ends_with("M")) %>%
  rename_with(~gsub("E$", "", .), ends_with("E")) %>%
  mutate(
    poppct_black = pop_black / pop_total,
    poppct_asian = pop_asian / pop_total,
    poppct_white = pop_white / pop_total,
    poppct_latino = pop_latino / pop_total,
    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total
  ) %>%
  mutate(geometry = sf::st_difference(geometry, dallas_remove))

dallas_tracts <- sf::st_join(acs_tract, acs_place, sf::st_intersects, suffix = c("", "_DAL")) %>%
  filter(!is.na(NAM_DAL)) %>%
  select(geometry, everything()) %>%
  sf::st_simplify(dTolerance = 1) %>%
  mutate(
    tract_area = sf::st_area(geometry)
  ) %>%
  rowwise() %>%
  mutate(
    intersection = tryCatch(
      {
        inter = sf::st_intersection(geometry, acs_place$geometry[1])
        if (length(inter) == 0) { NA } else { inter }
      },
      error = function(e) NA
    ),
    intersection_area = ifelse(is.na(intersection), 0, sf::st_area(intersection)),
    area_proportion = as.numeric(intersection_area / tract_area),
    tract_name = str_remove(NAM, ";.*")
  ) %>%
  ungroup() %>%
  filter(area_proportion >= 0.20)
# %>%  pivot_longer(4:(which(names(.) == "GEOID_DAL") - 1), names_to = "variable")

bounds <- as.vector(sf::st_bbox(dallas_tracts))


```

```{=html}

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<div class="column-screen-inset">

  <div class="centered">
    <div class="btn-group btn-group-toggle" data-toggle="buttons">
      <input type="radio" class="btn-check" name="options" id="dallas" autocomplete="off" checked="true">
      <label class="btn btn-secondary" for="dallas">Dallas</label>
      
      <input type="radio" class="btn-check" name="options" id="dallaspeers" autocomplete="off">
      <label class="btn btn-secondary" for="dallaspeers">Dallas and Peers</label>
      
      <input type="radio" class="btn-check" name="options" id="compareall" autocomplete="off">
      <label class="btn btn-secondary" for="compareall">Compare all</label>
    </div>
  </div>
  
  <div class="grid" style="--bs-gap: 2rem;">
    <div class="g-col-2 accordion" id="accordionSidebar" style="height: 100vh; overflow-y: auto;">
      <div class="flex-shrink-0 p-3 bg-white">
        <a href="/" class="d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom">
          <svg class="bi pe-none me-2" width="30" height="24"><use xlink:href="#bootstrap"></use></svg>
          <span class="fs-5 fw-semibold">Metrics</span>
        </a>
        <ul class="list-unstyled ps-0">
          <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#hd-collapse" aria-expanded="false" data-bs-parent="#accordionSidebar">
              Human Development
            </button>
            <div class="collapse show" id="hd-collapse">
              <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                <li><a href="#housing-quality-and-affordability" class="link-dark d-inline-flex text-decoration-none rounded">Housing quality & affordability</a></li>
                <li><a href="#healthy-family-and-individuals" class="link-dark d-inline-flex text-decoration-none rounded">Healthy family & individuals</a></li>
                <li><a href="#transportation" class="link-dark d-inline-flex text-decoration-none rounded">Transportation</a></li>
                <li><a href="#affordability-of-other-goods-and-services" class="link-dark d-inline-flex text-decoration-none rounded">Affordability of other goods and services</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Education & skills</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Technological access</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Personal agency & empowerment</a></li>
              </ul>
            </div>
          </li>
          <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#ng-collapse" aria-expanded="false" data-bs-parent="#accordionSidebar">
              Neighborhood & governance
            </button>
            <div class="collapse" id="ng-collapse">
              <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Government capacity & delivery</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Civic capacity & engagement</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Stability & social cohesion</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Natural environment & infrastructure</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Public safety</a></li>
              </ul>
            </div>
          </li>
          <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#fd-collapse" aria-expanded="false" data-bs-parent="#accordionSidebar">
              Financial development
            </button>
            <div class="collapse" id="fd-collapse">
              <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Financial inclusion and access</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Savings & wealth</a></li>
              </ul>
            </div>
          </li>
              <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#ed-collapse" aria-expanded="false" data-bs-parent="#accordionSidebar">
              Economic development
            </button>
            <div class="collapse" id="ed-collapse">
              <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Size and health of the private sector</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Employment & jobs</a></li>
              </ul>
            </div>
          </li>
          <li class="border-top my-3"></li>
          <li class="mb-1">
            <button class="btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed" data-bs-toggle="collapse" data-bs-target="#other-collapse" aria-expanded="false" data-bs-parent="#accordionSidebar">
              Other
            </button>
            <div class="collapse" id="other-collapse">
              <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 small">
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Tables</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Download</a></li>
                <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Settings</a></li>
              </ul>
            </div>
          </li>
        </ul>
      </div>
    </div>
    
    
    
    <div class="g-col-8 card" id="dallas" style="margin-top: 3vh;">
      <div class="card-body">
        <div class="grid" style="--bs-columns: 3;">
          <div class="g-col-1">
            <h2 class="slim" id="overview">Overview</h2>
            <div class="accordion" id="overview">
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#demographics" aria-expanded="true" aria-controls="demographics">
                    Demographics
                  </button>
                </b>
                <div id="demographics" class="accordion-collapse collapse show" data-bs-parent="#overview">
                  <div class="accordion-body">
                    <!-- <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Population</a></li> -->
                    <!-- <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Race/ethnicity</a></li> -->
                    <!-- <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Language spoken at home</a></li> -->
                    <div class="list-group">
                      
                      <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                        <div class="button-content" id="pop">
                          <span class="left-content">Population</span>
                          <span class="right-content">
                            `r scales::comma(acs_place$pop_total[1])`
                          </span>
                        </div>
                      </a>
                      
                      <a href="#raceDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                        <div class="button-content" id="race">
                          <span class="left-content">Race/ethnicity...</span>
                          <div class="button-content-details" id="raceDetails">
                            <hr>
                            <span class="left-content-indent">White</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_white[1])`
                            </span>
                            <br>
                            <span class="left-content-indent">Black</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_black[1])`
                            </span>
                            <br>
                            <span class="left-content-indent">Hispanic/Latino</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_latino[1])`
                            </span>
                            <br>
                            <span class="left-content-indent">Asian</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_asian[1])`
                            </span>
                          </div>
                        </div>
                      </a>
                      
                      <a href="#langDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-toggle="list" data-bs-toggle="collapse">
                        <div class="button-content" id="lang">
                          <span class="left-content">Primary language spoken at home...</span>
                          <div class="button-content-details" id="langDetails">
                            <hr>
                            <span class="left-content-indent">English</span>
                            <span class="right-content">60%</span>
                            <br>
                            <span class="left-content-indent">Spanish</span>
                            <span class="right-content">30%</span>
                            <br>
                            <span class="left-content-indent">Vietnamese</span>
                            <span class="right-content">5%</span>
                            <br>
                            <span class="left-content-indent">Other</span>
                            <span class="right-content">5%</span>
                          </div>
                        </div>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="g-col-2">
            <div class="card box-of-map">
```
  
  
```{r overview-map}

leaflet(data = dallas_tracts, 
        elementId = "map_overview",
        options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 120
               )) %>%
  
  # Add base
  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_color, attribution = cpaltemplates::cpal_leaflet) %>%
  
  # City outline default
  addPolygons(
    group = "none",
    data = acs_place,
    fillColor = "#333333",
    fillOpacity = 0.05, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  # County outline default
  addPolygons(
    group = "none",
    data = target_counties %>% filter(CountyFIPS == 48113),
    fillColor = "#333333",
    fillOpacity = 0.0, weight = 2, color = "#333333",
    opacity = 0.1,
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  # Population by tract
  addPolygons(
    group = "pop",
    fillColor = "#325d88",
    fillOpacity = 0.5, 
    weight = 1,
    color = "#FFFFFF", 
    # dashArray = "3",
    label = lapply(1:nrow(dallas_tracts), function(i) {
      htmltools::HTML(paste0(
        "<i>", dallas_tracts$tract_name[i], "</i><br/>",
        "<b>Population:</b> ", scales::comma(dallas_tracts$pop_total[i]), "<br/>",
        "<b>Density:</b> ", scales::comma(dallas_tracts$pop_density[i]), "/mi<sup>2</sup>"
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%
  addPolygons(
    group = "pop",
    data = acs_place,
    fillColor = "#325d88",
    fillOpacity = 0.4, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  # addLegend("bottomright",
  #           pal = colorNumeric(colorRamp(c("#f2f4f5", "#325d88"), interpolate = "spline"), c(0,25000)),
  #           values = ~pop_density_cut,
  #           title = "Density",
  #           opacity = 0.7) %>%

  # Race/ethnicity by tract
  addPolygons(
    group = "race",
    fillColor = ~colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace)(pop_largestrace),
    fillOpacity = ~as.numeric(pop_racediff) + (1 - max(dallas_tracts$pop_racediff, na.rm = T))/2, 
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(dallas_tracts), function(i) {
      htmltools::HTML(paste0(
        "<i>", dallas_tracts$tract_name[i], "</i><br/>",
        "<b>Asian:</b> ", scales::comma(dallas_tracts$pop_asian[i]), " (", scales::percent(dallas_tracts$poppct_asian[i]), ")<br/>",
        "<b>Black:</b> ", scales::comma(dallas_tracts$pop_black[i]), " (", scales::percent(dallas_tracts$poppct_black[i]), ")<br/>",
        "<b>Hispanic/Latino:</b> ", scales::comma(dallas_tracts$pop_latino[i]), " (", scales::percent(dallas_tracts$poppct_latino[i]), ")<br/>",
        "<b>White:</b> ", scales::comma(dallas_tracts$pop_white[i]), " (", scales::percent(dallas_tracts$poppct_white[i]), ")"
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)) %>%
  addPolygons(
    group = "race",
    data = acs_place,
    fillColor = "#333333",
    fillOpacity = 0.05, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  addLegend(
    group = "race",
    layerId = "race",
    "bottomright",
    pal = colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace, na.color=NULL),
    values = ~pop_largestrace,
    title = "Race",
    opacity = 0.7
  ) %>%
  
  # Map bounds
  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
  
  # Layers control
  addLayersControl(
    baseGroups = c("none", "pop", "race")
  ) %>% 
  htmlwidgets::onRender("
    function(el, x) {
      var map_overview = this;

      function toggleLayer(layerName) {
        var input = $(map_overview.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
          return $(this).next('span').text().trim() === layerName;
        });
      
        if(input.length) {
          input[0].click();
        }
      };
      
      $('#pop').on('click', function() {
        console.log('Pop clicked');
        toggleLayer('pop');
      });
      
      $('#race').on('click', function() {
        console.log('Race clicked');
        toggleLayer('race');
      });
      
      $('#lang').on('click', function() {
        console.log('Lang clicked');
        toggleLayer('lang');
      });
      
      $('.info.legend.leaflet-control').hide();
      map_overview.on('overlayadd', function(eventLayer) {
        if (eventLayer.name === 'race') {
            $('.info.legend.leaflet-control').show();
        } else {
            $('.info.legend.leaflet-control').hide();
        }
      });
    }
  ")
```
  
  
```{=html}
            </div>
          </div>
        </div>
        
        <hr/>
        
        <div class="grid" style="--bs-columns: 3;">
          <div class="g-col-1">
            <h2 class="slim" id="human-development">Human Development</h2>
            <div class="accordion" id="human-development">
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#hqa" aria-expanded="true" aria-controls="hqa">
                    Housing Quality and Affordability
                  </button>
                </b>
                <div id="hqa" class="accordion-collapse collapse show" data-bs-parent="#human-development">
                  <div class="accordion-body">
                      
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="overcrowded-housing">
                        <span>Overcrowded housing</span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="rent-burden">
                        <span class="left-content">Rent burden</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="unhoused-rates">
                        <span class="left-content">Unhoused rates</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                      
                  </div>
                </div>
              </div>
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#hfi" aria-expanded="true" aria-controls="hfi">
                    Healthy Family & Individuals
                  </button>
                </b>
                <div id="hfi" class="accordion-collapse collapse" data-bs-parent="#human-development">
                  <div class="accordion-body">
                      
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="uninsured-population">
                        <span class="left-content">Uninsured population</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action disabled" aria-expanded="false" aria-disabled="true">
                      <div class="button-content" id="life-expectancy">
                        <span class="left-content">Life expectancy</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="health-index">
                        <span class="left-content">Health index</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                  </div>
                </div>
              </div>
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#trn" aria-expanded="true" aria-controls="trn">
                    Transportation
                  </button>
                </b>
                <div id="trn" class="accordion-collapse collapse" data-bs-parent="#human-development">
                  <div class="accordion-body">
                      
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="pub-commute-long">
                        <span class="left-content">Long public commute</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="priv-commute-long">
                        <span class="left-content">Long private commute</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="pub-commute">
                        <span class="left-content">Public commuters</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="priv-commute">
                        <span class="left-content">Private commuters</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                    <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="no-vehicle">
                        <span class="left-content">Households with no vehicle</span>
                        <!-- <span class="right-content"> -->
                        </span>
                      </div>
                    </a>
                    
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="g-col-2">
            <div class="card box-of-map">
```
  
  
```{r metrics-map}

leaflet(data = dallas_smallgeo, 
        elementId = "map_metrics",
        options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 120
               )) %>%
  
  # Add base
  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_color, attribution = cpaltemplates::cpal_leaflet) %>%
  
  # City outline default
  addPolygons(
    # group = "none",
    data = acs_place,
    fillColor = "#333333",
    fillOpacity = 0.05, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  # County outline default
  addPolygons(
    # group = "none",
    data = target_counties %>% filter(CountyFIPS == 48113),
    fillColor = "#333333",
    fillOpacity = 0.0, weight = 2, color = "#333333",
    opacity = 0.1,
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  addPolygons(
    group = "overcrowded-housing",
    data = metrics$sdf[[1]],
    fillColor = ~colorNumeric(palette = palette_cpal_teal, domain = c(0, max(metrics$sdf[[1]]$all, na.rm = TRUE) ))(all),
    fillOpacity = ~0.6 * (all - min(metrics$sdf[[1]]$all, na.rm = TRUE)) / max(metrics$sdf[[1]]$all, na.rm = TRUE) + 0.2, 
    weight = 1,
    color = "#FFFFFF", 
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[1]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[1]]$NAME[i], "</i><br/>",
        "<b>Pct in overcrowded housing:</b> ", scales::percent(metrics$sdf[[1]]$all[i])
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  
  addPolygons(
    group = "rent-burden",
    data = metrics$sdf[[2]],
    fillColor = ~colorNumeric(palette = palette_cpal_magenta, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),
    fillOpacity = ~0.6 * (all - min(metrics$sdf[[2]]$all, na.rm = TRUE)) / max(metrics$sdf[[2]]$all, na.rm = TRUE) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[2]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[2]]$NAME[i], "</i><br/>",
        "<b>Pct households with rent more than 30% of income:</b> ", scales::percent(metrics$sdf[[2]]$all[i])
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%

  addPolygons(
    group = "unhoused-rates",
    data = metrics$sdf[[3]],
    fillColor = ~colorNumeric(palette = palette_cpal_yellow, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),
    fillOpacity = ~0.6 * (all - min(metrics$sdf[[3]]$all, na.rm = TRUE)) / max(metrics$sdf[[3]]$all, na.rm = TRUE) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[3]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[3]]$NAME[i], "</i><br/>",
        "<b>Pct individuals experiencing homelessness:</b> ", scales::percent(metrics$sdf[[3]]$all[i], accuracy = 0.0001)
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  
  addPolygons(
    group = "uninsured-population",
    data = metrics$sdf[[4]],
    fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),
    fillOpacity = ~0.6 * (all - min(metrics$sdf[[4]]$all, na.rm = TRUE)) / max(metrics$sdf[[4]]$all, na.rm = TRUE) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[4]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[4]]$NAME[i], "</i><br/>",
        "<b>Pct individuals uninsured:</b> ", scales::percent(metrics$sdf[[4]]$all[i])
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  # 
  # addPolygons(
  #   group = metrics$Metric[5],
  #   data = metrics$sdf[[5]],
  #   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),
  #   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,
  #   weight = 1,
  #   color = "#FFFFFF",
  #   # dashArray = "3",
  #   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {
  #     htmltools::HTML(paste0(
  #       "<i>", metrics$sdf[[5]]$NAME[i], "</i><br/>",
  #       "<b>Life expectancy:</b> ", scales::percent(metrics$sdf[[5]]$all[i])
  #     ))
  #   }),
  #   labelOptions = labelOptions(direction = 'auto', html = TRUE)
  # ) %>%
  
    
  addPolygons(
    group = "health-index",
    data = metrics$sdf[[6]],
    fillColor = ~colorNumeric(palette = palette_cpal_purple, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = ~ 0.6 * ((all - min(metrics$sdf[[6]]$all, na.rm = TRUE)) / max(metrics$sdf[[6]]$all, na.rm = TRUE)) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[6]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[6]]$NAME[i], "</i><br/>",
        "<b>Health index:</b> ", scales::number(metrics$sdf[[6]]$all[i], accuracy = 0.001), "<br/>",
        "<br/>",
        "<i><sup>*Lower index score is better</sup></i>"
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%

  addPolygons(
    group = "pub-commute-long",
    data = metrics$sdf[[7]],
    fillColor = ~colorNumeric(palette = palette_cpal_purple, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = ~ 0.6 * ((all - min(metrics$sdf[[7]]$all, na.rm = TRUE)) / max(metrics$sdf[[7]]$all, na.rm = TRUE)) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[7]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[7]]$NAME[i], "</i><br/>",
        "<b>Percent longer public commute than 45 min.:</b> ", scales::percent(metrics$sdf[[7]]$all[i], accuracy = 0.1)
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  
  addPolygons(
    group = "priv-commute-long",
    data = metrics$sdf[[8]],
    fillColor = ~colorNumeric(palette = palette_cpal_purple, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = ~ 0.6 * ((all - min(metrics$sdf[[8]]$all, na.rm = TRUE)) / max(metrics$sdf[[8]]$all, na.rm = TRUE)) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[8]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[8]]$NAME[i], "</i><br/>",
        "<b>Percent longer private commute than 45 min.:</b> ", scales::percent(metrics$sdf[[8]]$all[i], accuracy = 0.1)
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  
  addPolygons(
    group = "pub-commute",
    data = metrics$sdf[[9]],
    fillColor = ~colorNumeric(palette = palette_cpal_purple, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = ~ 0.6 * ((all - min(metrics$sdf[[9]]$all, na.rm = TRUE)) / max(metrics$sdf[[9]]$all, na.rm = TRUE)) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[9]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[9]]$NAME[i], "</i><br/>",
        "<b>Percent using public commute:</b> ", scales::percent(metrics$sdf[[9]]$all[i], accuracy = 0.1)
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  
  addPolygons(
    group = "priv-commute",
    data = metrics$sdf[[10]],
    fillColor = ~colorNumeric(palette = palette_cpal_purple, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = ~ 0.6 * ((all - min(metrics$sdf[[10]]$all, na.rm = TRUE)) / max(metrics$sdf[[10]]$all, na.rm = TRUE)) + 0.2,
    weight = 1,
    color = "#FFFFFF",
    # dashArray = "3",
    label = lapply(1:nrow(metrics$sdf[[10]]), function(i) {
      htmltools::HTML(paste0(
        "<i>", metrics$sdf[[10]]$NAME[i], "</i><br/>",
        "<b>Percent using public commute:</b> ", scales::percent(metrics$sdf[[10]]$all[i], accuracy = 0.1)
      ))
    }),
    labelOptions = labelOptions(direction = 'auto', html = TRUE)
  ) %>%
  
  # Map bounds
  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%

  # Layers control
  addLayersControl(
    baseGroups = c("None", "overcrowded-housing", "rent-burden", "unhoused-rates", "uninsured-population", "life-expectancy", "health-index", "pub-commute-long", "priv-commute-long", "pub-commute", "priv-commute", "no-vehicle", metrics$Metric)
  ) %>%
  htmlwidgets::onRender(paste0("
    function(el, x) {
      var map_metrics = this;

      function toggleLayer(layerName) {
        var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
          return $(this).next('span').text().trim() === layerName;
        });

        if(input.length) {
          input[0].click();
        }
      };

      $('#overcrowded-housing').on('click', function() {
        toggleLayer('overcrowded-housing');
      });

      $('#rent-burden').on('click', function() {
        toggleLayer('rent-burden');
      });

      $('#unhoused-rates').on('click', function() {
        toggleLayer('unhoused-rates');
      });

      $('#uninsured-population').on('click', function() {
        toggleLayer('uninsured-population');
      });

      $('#health-index').on('click', function() {
        toggleLayer('health-index');
      });

      $('#pub-commute-long').on('click', function() {
        toggleLayer('pub-commute-long');
      });

      $('#priv-commute-long').on('click', function() {
        toggleLayer('priv-commute-long');
      });

      $('#pub-commute').on('click', function() {
        toggleLayer('pub-commute');
      });

      $('#priv-commute').on('click', function() {
        toggleLayer('priv-commute');
      });

      $('#no-vehicle').on('click', function() {
        toggleLayer('no-vehicle');
      });

    }
  "))

```
  
  
```{=html}
            </div>
          </div>
        </div>
        
        
        <hr/>
        
        
        
      </div>
    </div>
    
    <div class="g-col-8 card" id="dallaspeers" style="height: 100vh; overflow-y: auto; margin-top: 3vh;">
      <div class="card-body">
        
```     

```{r peer_medians, output = 'asis'}

for(system in peer_medians %>% distinct(System) %>% pull()) {
  cat("##", system, "\n")

  cat("<div class=\"indent\">")
  
  for(area in peer_medians %>% filter(System == system) %>% distinct(Area) %>% pull()) {
    cat("###", area, "\n")
    
    # Generate and mutate the table
    display <- peer_medians %>%
      filter(System == system, Area == area) %>%
      mutate(
        PeerMedian = case_when(
          Measure == "%" ~ scales::percent(PeerMedian),
          TRUE ~ scales::number(PeerMedian)
        ),
        BestPeer = case_when(
          Measure == "%" ~ scales::percent(BestPeer),
          TRUE ~ scales::number(BestPeer)
        ),
        Dallas = case_when(
          Measure == "%" ~ scales::percent(Dallas),
          TRUE ~ scales::number(Dallas)
        ),
        DallasRank = scales::number(DallasRank)
      ) %>%
      select(
        "Metric" = Metric,
        Dallas,
        "Dallas Rank" = DallasRank,
        "Peer Median" = PeerMedian,
        "Best Peer" = BestPeer
      )
    
    display %>%
      kable() %>%
      kable_styling(fixed_thead = T) %>%
      column_spec(1, width = "40vw") %>%
      column_spec(2, width = "10vw") %>%
      column_spec(3, width = "10vw") %>%
      column_spec(4, width = "10vw") %>%
      column_spec(5, width = "10vw") %>%
      print()
  }
  
  cat("</div>")
  
}


```

```{=html}
      </div>
    </div>
    
    
    <div class="g-col-8" id="compareall" style="height: 100vh; overflow-y: auto;">
    
      <div style="margin: 3vh;"></div>
      
```


::: {.callout-note appearance="simple" style="width: 50%; margin: auto;"}

This tool is under continuous development...check back later for more!

:::

```{=html}
    
    </div>
    
    
    <div class="g-col-2" style="height: 100vh; overflow-y: auto;">
    
      <div class="card text-bg-info mb-3" style="max-width: 24rem">
      
        <div style="font-size: 24px; text-align: center; margin: 5px; margin-top: 15px">
          <b><i class="bi bi-info-circle-fill"></i>  Sorry for the mess.</b>
        </div>
        
        <div class="card-body">
          
          <p class="card-text">This tool is under development, so many intended features and functionalities remain missing. Feedback is appreciated.</p>
        
        </div>
      
      </div>
    
    </div>
    
    
  </div>
</div>

```