---
pagetitle: "Place & Equity"
echo: false
toc: false
---

```{r setup, output=F}
library(tidyverse)
library(ggplot2)
library(sf)
library(leaflet)
library(kableExtra)
library(cpaltemplates)
library(highcharter)

city_list <- list("Dallas, TX", "San Diego, CA", "Austin, TX", "Charlotte, NC", "Washington, DC", "Phoenix, AZ", "San Antonio, TX", "Atlanta, GA", "Houston, TX", "Miami, FL", "Philadelphia, PA")

geographies <- c(
  "Block group" = 1,
  "Tract" = 2,
  "PUMA" = 3,
  "Place" = 4,
  "CSA" = 5,
  "County" = 6
)

city_geometry <- tigris::places(year = 2022, cb = TRUE)

dallas_remove <- sf::st_sfc(sf::st_polygon(list(matrix(c(
  -96.6, 32.75,
  -96.6, 33.1,
  -96.3, 33.1,
  -96.3, 32.75,
  -96.6, 32.75
), ncol = 2, byrow = TRUE))), crs = sf::st_crs(city_geometry))

# target_cities <- city_geometry %>%
#   mutate(cityst = paste0(NAME, ", ", STUSPS)) %>%
#   filter(cityst %in% city_list) %>%
#   mutate(geometry = if_else(cityst == "Dallas, TX", 
#                             sf::st_difference(geometry, dallas_remove), 
#                             geometry)) %>%
#   mutate(geometry = sf::st_simplify(geometry, dTolerance = 1))
target_cities <- st_read("data/target_cities.geojson")

# city_plots <- lapply(target_cities$cityst, function(city) {
#   city_data <- target_cities %>% filter(cityst == city)
#   ggplot(city_data) + 
#     geom_sf(fill = "grey10", color = NA) +
#     theme_void()
# })

fips_codes <- tidycensus::fips_codes %>%
  mutate(CountyFIPS = paste0(state_code, county_code))

target_counties <- st_read("data/target_counties.geojson")
target_metros <- st_read("data/target_metros.geojson")
target_tracts <- st_read("data/target_tracts.geojson")
# target_sds_TX <- st_read("data/target_sds_TX.geojson")


# targets <- bind_rows(
#   target_counties %>%
#     mutate(
#       Geography = "County"
#     ) %>%
#     select(
#       Geography,
#       GEOID = CountyFIPS,
#       NAME = NAME.x,
#       City = cityst,
#       geometry
#     ),
#   target_metros %>%
#     mutate(
#       Geography = "CSA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_cities %>%
#     mutate(
#       Geography = "Place"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_PUMAs %>%
#     mutate(
#       Geography = "PUMA"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME,
#       City = cityst,
#       geometry
#     ),
#   target_tracts %>%
#     mutate(
#       Geography = "Tract"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     ),
#   target_2019tracts %>%
#     mutate(
#       Geography = "Tract (2019)"
#     ) %>%
#     select(
#       Geography,
#       GEOID,
#       NAME = NAMELSAD.x,
#       City = cityst,
#       geometry
#     )
# )
# st_write(targets, "data/targets.geojson")

targets <- st_read("data/targets.geojson")

peer_medians <- read_csv("data/peer_medians.csv")

dallas_smallgeo <- read_csv("data/dallas_smallgeo.csv", col_types = c("GEOID" = "character")) %>%
  left_join(
    targets
  ) %>%
  st_as_sf()

metrics <- read_csv("data/smallest_geo_available.csv") %>%
  rowwise() %>%
  mutate(
    target = Metric,
    sdf = list(filter(dallas_smallgeo, Metric == target))
  ) %>%
  ungroup() %>%
  select(-target)

acs_tract <- tidycensus::get_acs("tract",
                                 variables = c("pop_total" = "S1701_C01_001", 
                                               "pov_total" = "S1701_C02_001", 
                                               "pop_black" = "B01001B_001", 
                                               "pop_native" = "B01001C_001", 
                                               "pop_asian" = "B01001D_001", 
                                               "pop_pacific" = "B01001E_001", 
                                               "pop_otherrace" = "B01001F_001", 
                                               "pop_multirace" = "B01001G_001", 
                                               "pop_white" = "B01001H_001", 
                                               "pop_latino" = "B01001I_001"),
                                 year = 2022,
                                 state = "TX",
                                 county = c("Dallas", "Denton", "Collin County", "Kaufman", "Rockwall"),
                                 geometry = TRUE,
                                 output = "wide") %>%
  select(-ends_with("M")) %>%
  rename_with(~gsub("E$", "", .), ends_with("E")) %>%
  mutate(
    poppct_black = pop_black / pop_total,
    poppct_asian = pop_asian / pop_total,
    poppct_white = pop_white / pop_total,
    poppct_latino = pop_latino / pop_total,
    tract_sqmi = as.numeric(units::set_units(sf::st_area(geometry), mi^2)),
    pop_density = pop_total/tract_sqmi,
    pop_density_cut = ifelse(pop_density > 25000, 25000, pop_density)
    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total,
  ) %>%
  mutate(
    max_race_info = pmap(
      list(poppct_black, poppct_asian, poppct_white, poppct_latino), 
      ~ {
        percentages <- c(...); 
        names(percentages) <- c("Black", "Asian", "White", "Hispanic/Latino");
        sorted <- sort(percentages, decreasing = TRUE); 
        max_race <- names(sorted)[1]; 
        second_max_race <- names(sorted)[2]; 
        max_diff <- sorted[1] - sorted[2]; 
        list(max_race, max_diff)
      }
    )
  ) %>%
  unnest_wider(max_race_info, names_sep = "_") %>%
  rename(
    pop_largestrace = max_race_info_1,
    pop_racediff = max_race_info_2
  ) %>%
  sf::st_as_sf() %>%
  sf::st_set_crs(4269)

acs_place <- tidycensus::get_acs("place",
                                 variables = c("pop_total" = "S1701_C01_001", 
                                               "pov_total" = "S1701_C02_001", 
                                               "pop_black" = "B01001B_001", 
                                               "pop_native" = "B01001C_001", 
                                               "pop_asian" = "B01001D_001", 
                                               "pop_pacific" = "B01001E_001", 
                                               "pop_otherrace" = "B01001F_001", 
                                               "pop_multirace" = "B01001G_001", 
                                               "pop_white" = "B01001H_001", 
                                               "pop_latino" = "B01001I_001"),
                                 year = 2022,
                                 state = "TX",
                                 geometry = TRUE,
                                 output = "wide") %>%
  filter(NAME == "Dallas city, Texas") %>%
  select(-ends_with("M")) %>%
  rename_with(~gsub("E$", "", .), ends_with("E")) %>%
  mutate(
    poppct_black = pop_black / pop_total,
    poppct_asian = pop_asian / pop_total,
    poppct_white = pop_white / pop_total,
    poppct_latino = pop_latino / pop_total,
    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total
  ) %>%
  mutate(geometry = sf::st_difference(geometry, dallas_remove))

dallas_tracts <- sf::st_join(acs_tract, acs_place, sf::st_intersects, suffix = c("", "_DAL")) %>%
  filter(!is.na(NAM_DAL)) %>%
  select(geometry, everything()) %>%
  sf::st_simplify(dTolerance = 1) %>%
  mutate(
    tract_area = sf::st_area(geometry)
  ) %>%
  rowwise() %>%
  mutate(
    intersection = tryCatch(
      {
        inter = sf::st_intersection(geometry, acs_place$geometry[1])
        if (length(inter) == 0) { NA } else { inter }
      },
      error = function(e) NA
    ),
    intersection_area = ifelse(is.na(intersection), 0, sf::st_area(intersection)),
    area_proportion = as.numeric(intersection_area / tract_area),
    tract_name = str_remove(NAM, ";.*")
  ) %>%
  ungroup() %>%
  filter(area_proportion >= 0.20)
# %>%  pivot_longer(4:(which(names(.) == "GEOID_DAL") - 1), names_to = "variable")

bounds <- as.vector(sf::st_bbox(dallas_tracts))
# hi taylor

#### palettes ####

palette <- cpaltemplates::palette_cpal_main
palette <- c(palette[-1], palette[1])


binning <- function(n, color, na.color = "#333333") {
  
  color = if (color %% 8 == 0) {8} else {color %% 8}
  
  uniq <- unique(colorBin(
          bins = 5,
          colorRampPalette(c("#FFFFFF", palette[[1]]))(5),
          na.color = na.color,
          pretty = TRUE,
          domain = metrics$sdf[[n]]$all
        )(metrics$sdf[[n]]$all))
  
  if (na.color %in% uniq) {n_bins <- length(uniq) - 1} else {n_bins <- length(uniq)}
  
  bin_palette <- colorRampPalette(c("#FFFFFF", palette[[color]]))(n_bins)
  
  list(values = colorBin(
          bins = n_bins,
          bin_palette,
          na.color = na.color,
          pretty = TRUE,
          domain = metrics$sdf[[n]]$all
        )(metrics$sdf[[n]]$all),
       breaks = classInt::classIntervals(
          metrics$sdf[[n]]$all,
          style = "pretty",
          n = n_bins
       )$brks,
       n_bins = n_bins,
       palette = bin_palette
  )
}

#### bins_hc ####

hc_cpal <- hc_theme(
        chart = list(
          backgroundColor = 'transparent',
          style = list(
            fontFamily = "Inter"
          )
        )
      )

bins_hc <- function(n, color, title = NULL, bin_labels = NULL, pct = FALSE, hover = NULL, axis_label = NULL, na.color = "#333333") {
  
  color = if (color %% 8 == 0) {8} else {color %% 8}
  
  bin_data <- binning(n, color, na.color)
  breaks <- bin_data$breaks
  
  if (!is.null(bin_labels)) bin_labels <- bin_labels else if (pct) {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(scales::percent(breaks[i]), scales::percent(breaks[i+1]), sep = "-"))} else {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(breaks[i], breaks[i+1], sep = "-"))} %>% as.vector()
  
  bins <- bin_data$values %>% 
    table() %>% 
    as.data.frame() %>% 
    filter(`.` != "#333333") %>%
    mutate(color = factor(`.`, levels = bin_data$palette)) %>%
    select(-`.`) %>%
    arrange(color) %>%
    bind_cols(label = bin_labels)
 
  chart <- bins %>%
    hchart(
      'column',
      hcaes(x = label, y = Freq, color = color)
    ) %>%
    hc_size(height = "25vh", width = "100%") %>%
    hc_xAxis(title = FALSE, labels = list(enabled = TRUE), gridLineWidth = 0, reversed = TRUE) %>%  
    # hc_yAxis(title = ifelse(is.null(axis_label), FALSE, list(text = axis_label)), labels = list(enabled = FALSE), gridLineWidth = 0) %>%  
    hc_yAxis(title = list(text = axis_label), labels = list(enabled = FALSE), gridLineWidth = 0) %>%
    hc_chart(plotBackgroundColor = NULL, plotBorderWidth = 0, spacing = 10, inverted=TRUE) %>%
    hc_plotOptions(column = list(borderWidth = 1, borderColor = 'lightgrey', pointWidth = 30,
                                 pointPadding = 0, groupPadding = 0),
                   states = list(hover = list(
                                      enabled = TRUE,
                                      brightness = -0.2))
                   ) %>%
    hc_legend(enabled = FALSE) %>%
    hc_tooltip(formatter = JS("function() {
                return this.x + ': ' + this.y; 
            }")) %>%
    hc_title(text = title) %>%
    hc_add_theme(hc_cpal)
    

  
  chart
}

```

```{=html}

<div class="modal fade" id="tutorialModal" tabindex="-1" aria-labelledby="tutorialModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tutorialModalLabel">Welcome to the Place & Equity tool</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>This proof of concept uses multifaceted data to visually summarize disparities in Dallas. By pulling across many areas of study, it highlights underserved areas in Dallas and also measures Dallas against comparable peer cities.</p>
                <h6>Dallas</h6>
                <p>This tab shows metrics at the smallest possible geography. Click a metric to see it displayed on the map.</p>
                <h6>Dallas and Peers</h6>
                <p>This tab compares Dallas to 10 peer cities. "Dallas" shows the total metric in Dallas, and "Dallas Rank" places Dallas out of 11 peers. "Peer Median" shows the median metric among peers, and "Best Peer" is the best metric among peers.</p>
                <h6>Compare all</h6>
                <p>This tab is under development.</p>
            </div>
            <div class="modal-footer">
                <p class="text-muted" style="font-size: small;">To reopen this popup, click <i class="bi bi-info-circle-fill" style="color: var(--bs-secondary);"></i></p>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="column-screen-inset">

  <div class="centered">
    <div class="btn-group btn-group-toggle" data-toggle="buttons">
      <input type="radio" class="btn-check" name="options" id="btn-dallas" autocomplete="off" checked="true">
      <label class="btn btn-secondary" for="btn-dallas">Dallas</label>
  
      <input type="radio" class="btn-check" name="options" id="btn-dallaspeers" autocomplete="off">
      <label class="btn btn-secondary" for="btn-dallaspeers">Dallas and Peers</label>
  
      <input type="radio" class="btn-check" name="options" id="btn-compareall" autocomplete="off">
      <label class="btn btn-secondary" for="btn-compareall">Compare all</label>
    </div>
    
    <div style="margin: 0 10px;">
      <i class="bi bi-info-circle-fill" style="font-size: 1.5rem; color: var(--bs-secondary);" data-bs-toggle="modal" data-bs-target="#tutorialModal" role="button" aria-label="Open tutorial"></i>
    </div>
    
  </div>
  
  <div class="grid" style="--bs-gap: 2rem;">
    <div class="g-col-2 accordion lock-column" id="accordionSidebar" style="height: 100vh; overflow-y: auto;">
      <div class="flex-shrink-0 p-3 bg-white">
        <a href="#overview" class="d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom">
          <svg class="bi pe-none me-2" width="30" height="24"><use xlink:href="#bootstrap"></use></svg>
          <span class="fs-5 fw-semibold">Overview</span>
        </a>
        <a href="#human-development" class="d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom">
          <svg class="bi pe-none me-2" width="30" height="24"><use xlink:href="#bootstrap"></use></svg>
          <span class="fs-5 fw-semibold">Human Development</span>
        </a>
      </div>
    </div>
    
    
    
    <div class="g-col-8 card" id="dallas" style="margin-top: 3vh;">
      <div class="card-body">
        <div class="grid" style="--bs-columns: 5;">
          <div class="g-col-2">
            <h2 class="slim" id="overview">Overview</h2>
            <div class="accordion" id="overview">
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#demographics" aria-expanded="true" aria-controls="demographics">
                    Demographics
                  </button>
                </b>
                <div id="demographics" class="accordion-collapse collapse show" data-bs-parent="#overview">
                  <div class="accordion-body">
                    <!-- <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Population</a></li> -->
                    <!-- <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Race/ethnicity</a></li> -->
                    <!-- <li><a href="#" class="link-dark d-inline-flex text-decoration-none rounded">Language spoken at home</a></li> -->
                    <div class="list-group">
                      
                      <a href="#" class="list-group-item list-group-item-action" aria-expanded="false">
                        <div class="button-content" id="pop">
                          <span class="left-content">Population</span>
                          <span class="right-content">
                            `r scales::comma(acs_place$pop_total[1])`
                          </span>
                        </div>
                      </a>
                      
                      <a href="#raceDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                        <div class="button-content" id="race">
                          <span class="left-content">Race/ethnicity...</span>
                          <div class="button-content-details" id="raceDetails">
                            <hr>
                            <span class="left-content-indent">White</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_white[1])`
                            </span>
                            <br>
                            <span class="left-content-indent">Black</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_black[1])`
                            </span>
                            <br>
                            <span class="left-content-indent">Hispanic/Latino</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_latino[1])`
                            </span>
                            <br>
                            <span class="left-content-indent">Asian</span>
                            <span class="right-content">
                              `r scales::percent(acs_place$poppct_asian[1])`
                            </span>
                          </div>
                        </div>
                      </a>
                      
                      <a href="#langDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-toggle="list" data-bs-toggle="collapse">
                        <div class="button-content" id="lang">
                          <span class="left-content">Primary language spoken at home...</span>
                          <div class="button-content-details" id="langDetails">
                            <hr>
                            <span class="left-content-indent">English</span>
                            <span class="right-content">60%</span>
                            <br>
                            <span class="left-content-indent">Spanish</span>
                            <span class="right-content">30%</span>
                            <br>
                            <span class="left-content-indent">Vietnamese</span>
                            <span class="right-content">5%</span>
                            <br>
                            <span class="left-content-indent">Other</span>
                            <span class="right-content">5%</span>
                          </div>
                        </div>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="g-col-3">
            <div class="card box-of-map">
```
  
  
```{r overview-map}

leaflet(data = dallas_tracts, 
        elementId = "map_overview",
        options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 120
               )) %>%
  
  # Add base
  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
  
  # City outline default
  addPolygons(
    # group = "none",
    data = acs_place,
    fillColor = "#333333",
    fillOpacity = 0.05, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  # County outline default
  addPolygons(
    # group = "none",
    data = target_counties %>% filter(CountyFIPS == 48113),
    fillColor = "#333333",
    fillOpacity = 0.0, weight = 2, color = "#333333",
    opacity = 0.1,
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  # Population by tract
  addPolygons(
    group = "pop",
    fillColor = "#325d88",
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup =
      paste0(
        "<i>", dallas_tracts$tract_name, "</i><br/>",
        "<b>Population:</b> ", scales::comma(dallas_tracts$pop_total), "<br/>",
        "<b>Density:</b> ", scales::comma(dallas_tracts$pop_density), "/mi<sup>2</sup>"
      )
    ) %>%

  # Race/ethnicity by tract
  addPolygons(
    group = "race",
    fillColor = ~colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace)(pop_largestrace),
    fillOpacity = ~as.numeric(pop_racediff) + (1 - max(dallas_tracts$pop_racediff, na.rm = T))/2, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    popup = paste0(
        "<i>", dallas_tracts$tract_name, "</i><br/>",
        "<b>Asian:</b> ", scales::comma(dallas_tracts$pop_asian), " (", scales::percent(dallas_tracts$poppct_asian), ")<br/>",
        "<b>Black:</b> ", scales::comma(dallas_tracts$pop_black), " (", scales::percent(dallas_tracts$poppct_black), ")<br/>",
        "<b>Hispanic/Latino:</b> ", scales::comma(dallas_tracts$pop_latino), " (", scales::percent(dallas_tracts$poppct_latino), ")<br/>",
        "<b>White:</b> ", scales::comma(dallas_tracts$pop_white), " (", scales::percent(dallas_tracts$poppct_white), ")"
    )
  ) %>%

  addLegend(
    group = "race",
    layerId = "race",
    "bottomright",
    pal = colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace, na.color=NULL),
    values = ~pop_largestrace,
    title = "Race",
    opacity = 0.7
  ) %>%
  
  # Map bounds
  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%
  
  # Layers control
  addLayersControl(
    baseGroups = c("none", "pop", "race")
  ) %>% 
  htmlwidgets::onRender("
    function(el, x) {
      var map_overview = this;

      function toggleLayer(layerName) {
        var input = $(map_overview.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
          return $(this).next('span').text().trim() === layerName;
        });
      
        if(input.length) {
          input[0].click();
        }
      };
      
      $('#pop').on('click', function() {
        console.log('Pop clicked');
        toggleLayer('pop');
      });
      
      $('#race').on('click', function() {
        console.log('Race clicked');
        toggleLayer('race');
      });
      
      $('#lang').on('click', function() {
        console.log('Lang clicked');
        toggleLayer('lang');
      });
      
      $('.info.legend.leaflet-control').hide();
      map_overview.on('overlayadd', function(eventLayer) {
        if (eventLayer.name === 'race') {
            $('.info.legend.leaflet-control').show();
        } else {
            $('.info.legend.leaflet-control').hide();
        }
      });
    }
  ")
```
  
  
```{=html}
            </div>
          </div>
        </div>
        
        <hr/>
        
        <div class="grid" style="--bs-columns: 5;">
          <div class="g-col-2">
            <h2 class="slim" id="human-development">Human Development</h2>
            <div class="accordion" id="human-development">
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#hqa" aria-expanded="true" aria-controls="hqa">
                    Housing Quality and Affordability
                  </button>
                </b>
                <div id="hqa" class="accordion-collapse collapse show" data-bs-parent="#human-development">
                  <div class="accordion-body">
                      
                    <a href="#overcrowdedDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="overcrowded-housing">
                        <span>Overcrowded housing (%)</span>
                        <div class="button-content-details" id="overcrowdedDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=1, color=1, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. tracts")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#rentburdenDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="rent-burden">
                        <span>Rent burden</span>
                        <div class="button-content-details" id="rentburdenDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=2, color=2, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#unhousedratesDetails" class="list-group-item list-group-item-action" aria-expanded="false">
                      <div class="button-content" id="unhoused-rates">
                        <span>Unhoused rates</span>
                        <div class="button-content-details" id="rentburdenDetails">
                          <div class="histogram card">
                          The unhoused rate for North Texas is 1 in `r scales::number(1/metrics$sdf[[3]]$all, accuracy = 1)` people.
                          </div>
                        </div>
                      </div>
                    </a>
                      
                  </div>
                </div>
              </div>
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#hfi" aria-expanded="true" aria-controls="hfi">
                    Healthy Family & Individuals
                  </button>
                </b>
                <div id="hfi" class="accordion-collapse collapse" data-bs-parent="#human-development">
                  <div class="accordion-body">
                      
                    <a href="#uninsuredDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="uninsured-population">
                        <span>Uninsured population</span>
                        <div class="button-content-details" id="uninsuredDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=4, color=4, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. tracts")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#lifeexpDetails" class="list-group-item list-group-item-action disabled" aria-expanded="false" aria-disabled="true">
                      <div class="button-content" id="life-expectancy">
                        <span>Life expectancy</span>
                      </div>
                    </a>
                    
                    <a href="#healthindexDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="health-index">
                        <span>Health index</span>
                        <div class="button-content-details" id="healthindexDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=6, color=6, title = NULL, bin_labels = NULL, pct = FALSE, axis_label = "Num. tracts")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                  </div>
                </div>
              </div>
              <div class="accordion-item">
                <b class="accordion-header">
                  <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#trn" aria-expanded="true" aria-controls="trn">
                    Transportation
                  </button>
                </b>
                <div id="trn" class="accordion-collapse collapse" data-bs-parent="#human-development">
                  <div class="accordion-body">
                      
                    <a href="#longpubDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="pub-commute-long">
                        <span class="left-content">Long public commute</span>
                        <div class="button-content-details" id="longpubDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=7, color=7, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#longprivDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="priv-commute-long">
                        <span class="left-content">Long private commute</span>
                        <div class="button-content-details" id="longprivDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=8, color=8, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#pubcomDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="pub-commute">
                        <span class="left-content">Public commuters</span>
                        <div class="button-content-details" id="pubcomDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=9, color=9, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#privcomDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="priv-commute">
                        <span class="left-content">Private commuters</span>
<div class="button-content-details" id="privcomDetails">
                          <div class="histogram card">
                          
```

```{r}
bins_hc(n=10, color=10, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = "Num. PUMAs")
```

```{=html}
                          </div>
                        </div>
                      </div>
                    </a>
                    
                    <a href="#novehDetails" class="list-group-item list-group-item-action" aria-expanded="false" data-bs-toggle="collapse">
                      <div class="button-content" id="no-vehicle">
                        <span class="left-content">Households with no vehicle</span>
                      </div>
                    </a>
                    
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="g-col-3">
            <div class="card box-of-map">
```
  
  
```{r map-hd}

leaflet(data = dallas_smallgeo, 
        elementId = "map-hd",
        options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 120
               )) %>%
  
  # Add base
  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%
  
  # City outline default
  addPolygons(
    # group = "none",
    data = acs_place,
    fillColor = "#333333",
    fillOpacity = 0.05, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  # County outline default
  addPolygons(
    # group = "none",
    data = target_counties %>% filter(CountyFIPS == 48113),
    fillColor = "#333333",
    fillOpacity = 0.0, weight = 2, color = "#333333",
    opacity = 0.1,
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  ) %>%
  
  addPolygons(
    group = "overcrowded-housing",
    data = metrics$sdf[[1]],
    fillColor = ~colorBin(palette = binning(1, 1)$palette, domain = c(0, max(metrics$sdf[[1]]$all, na.rm = TRUE)))(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup =
      paste0(
        "<i>", metrics$sdf[[1]]$NAME, "</i><br/>",
        "<b>Pct in overcrowded housing:</b> ", scales::percent(metrics$sdf[[1]]$all, accuracy = 0.1)
      )
    ) %>%
  
  addPolygons(
    group = "rent-burden",
    data = metrics$sdf[[2]],
    fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),
    fillOpacity = 0.5,
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
     highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = 
      paste0(
        "<i>", metrics$sdf[[2]]$NAME, "</i><br/>",
        "<b>Pct households with rent more than 30% of income:</b> ", scales::percent(metrics$sdf[[2]]$all, accuracy = 0.1)
      )
    ) %>%

  # addPolygons(
  #   group = "unhoused-rates",
  #   data = metrics$sdf[[3]],
  #   fillColor = ~colorNumeric(palette = binning(3, 3)$palette, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),
  #   fillOpacity = 0.5, 
  #   stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
  #   highlight = highlightOptions(
  #               opacity = 0.5,
  #               bringToFront = TRUE,
  #               sendToBack = TRUE),
  #   popup = paste0(
  #       "<i>", metrics$sdf[[3]]$NAME, "</i><br/>",
  #       "<b>Pct individuals experiencing homelessness:</b> ", scales::percent(metrics$sdf[[3]]$all, accuracy = 0.1)
  #     )
  # ) %>%
  
  addPolygons(
    group = "uninsured-population",
    data = metrics$sdf[[4]],
    fillColor = ~colorNumeric(palette = binning(4, 4)$palette, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = paste0(
        "<i>", metrics$sdf[[4]]$NAME, "</i><br/>",
        "<b>Pct individuals uninsured:</b> ", scales::percent(metrics$sdf[[4]]$all, accuracy = 0.1)
      )
  ) %>%
  # 
  # addPolygons(
  #   group = metrics$Metric[5],
  #   data = metrics$sdf[[5]],
  #   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),
  #   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,
  #   weight = 1,
  #   color = "#FFFFFF",
  #   # dashArray = "3",
  #   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {
  #     htmltools::HTML(paste0(
  #       "<i>", metrics$sdf[[5]]$NAME, "</i><br/>",
  #       "<b>Life expectancy:</b> ", scales::percent(metrics$sdf[[5]]$all)
  #     ))
  #   }),
  #   labelOptions = labelOptions(direction = 'auto', html = TRUE)
  # ) %>%
  
    
  addPolygons(
    group = "health-index",
    data = metrics$sdf[[6]],
    fillColor = ~colorNumeric(palette = binning(6, 6)$palette, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = paste0(
        "<i>", metrics$sdf[[6]]$NAME, "</i><br/>",
        "<b>Health index:</b> ", scales::number(metrics$sdf[[6]]$all, accuracy = 0.001), "<br/>",
        "<br/>",
        "<i><sup>*Lower index score is better</sup></i>"
      )
  ) %>%

  addPolygons(
    group = "pub-commute-long",
    data = metrics$sdf[[7]],
    fillColor = ~colorNumeric(palette = binning(7, 7)$palette, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = paste0(
        "<i>", metrics$sdf[[7]]$NAME, "</i><br/>",
        "<b>Percent longer public commute than 45 min.:</b> ", scales::percent(metrics$sdf[[7]]$all, accuracy = 0.1)
      )
  ) %>%
  
  addPolygons(
    group = "priv-commute-long",
    data = metrics$sdf[[8]],
    fillColor = ~colorNumeric(palette = binning(8, 8)$palette, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = paste0(
        "<i>", metrics$sdf[[8]]$NAME, "</i><br/>",
        "<b>Percent longer private commute than 45 min.:</b> ", scales::percent(metrics$sdf[[8]]$all, accuracy = 0.1)
      )
  ) %>%
  
  addPolygons(
    group = "pub-commute",
    data = metrics$sdf[[9]],
    fillColor = ~colorNumeric(palette = binning(9, 9)$palette, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = paste0(
        "<i>", metrics$sdf[[9]]$NAME, "</i><br/>",
        "<b>Percent using public commute:</b> ", scales::percent(metrics$sdf[[9]]$all, accuracy = 0.1)
      )
  ) %>%
  
  addPolygons(
    group = "priv-commute",
    data = metrics$sdf[[10]],
    fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = "#a4a6ab")(all),
    fillOpacity = 0.5, 
    stroke = TRUE, color = "#333333", weight = 1.5, opacity = 0.1,
    highlight = highlightOptions(
                opacity = 0.5,
                bringToFront = TRUE,
                sendToBack = TRUE),
    popup = paste0(
        "<i>", metrics$sdf[[10]]$NAME, "</i><br/>",
        "<b>Percent using private commute:</b> ", scales::percent(metrics$sdf[[10]]$all, accuracy = 0.1)
      )
  ) %>%
  
  # Map bounds
  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%

  # Layers control
  addLayersControl(
    baseGroups = c("None", "overcrowded-housing", "rent-burden", "unhoused-rates", "uninsured-population", "life-expectancy", "health-index", "pub-commute-long", "priv-commute-long", "pub-commute", "priv-commute", "no-vehicle", metrics$Metric)
  ) %>%
  htmlwidgets::onRender(paste0("
    function(el, x) {
      var map_metrics = this;

      function toggleLayer(layerName) {
        var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {
          return $(this).next('span').text().trim() === layerName;
        });

        if(input.length) {
          input[0].click();
        }
      };

      $('#overcrowded-housing').on('click', function() {
        toggleLayer('overcrowded-housing');
      });

      $('#rent-burden').on('click', function() {
        toggleLayer('rent-burden');
      });

      $('#unhoused-rates').on('click', function() {
        toggleLayer('None');
      });

      $('#uninsured-population').on('click', function() {
        toggleLayer('uninsured-population');
      });

      $('#health-index').on('click', function() {
        toggleLayer('health-index');
      });

      $('#pub-commute-long').on('click', function() {
        toggleLayer('pub-commute-long');
      });

      $('#priv-commute-long').on('click', function() {
        toggleLayer('priv-commute-long');
      });

      $('#pub-commute').on('click', function() {
        toggleLayer('pub-commute');
      });

      $('#priv-commute').on('click', function() {
        toggleLayer('priv-commute');
      });

      $('#no-vehicle').on('click', function() {
        toggleLayer('no-vehicle');
      });

    }
  "))

```
  
  
```{=html}
            </div>
          </div>
        </div>
        
        
        <hr/>
        
        
        
      </div>
    </div>
    
    <div class="g-col-8 card" id="dallaspeers" style="height: 100vh; overflow-y: auto; margin-top: 3vh; display: none;"> 
      <div class="card-body">
        
```     

```{r peer_medians, output = 'asis'}

for(system in peer_medians %>% distinct(System) %>% pull()) {
  cat("##", system, "\n")

  cat("<div class=\"indent\">")
  
  for(area in peer_medians %>% filter(System == system) %>% distinct(Area) %>% pull()) {
    cat("###", area, "\n")
    
    # Generate and mutate the table
    display <- peer_medians %>%
      filter(System == system, Area == area) %>%
      mutate(
        PeerMedian = case_when(
          Measure == "%" ~ scales::percent(PeerMedian),
          TRUE ~ scales::number(PeerMedian)
        ),
        BestPeer = case_when(
          Measure == "%" ~ scales::percent(BestPeer),
          TRUE ~ scales::number(BestPeer)
        ),
        Dallas = case_when(
          Measure == "%" ~ scales::percent(Dallas),
          TRUE ~ scales::number(Dallas)
        ),
        DallasRank = scales::number(DallasRank)
      ) %>%
      select(
        "Metric" = Metric,
        Dallas,
        "Dallas Rank" = DallasRank,
        "Peer Median" = PeerMedian,
        "Best Peer" = BestPeer
      )
    
    display %>%
      kable() %>%
      kable_styling(fixed_thead = T) %>%
      column_spec(1, width = "40vw") %>%
      column_spec(2, width = "10vw") %>%
      column_spec(3, width = "10vw") %>%
      column_spec(4, width = "10vw") %>%
      column_spec(5, width = "10vw") %>%
      print()
  }
  
  cat("</div>")
  
}


```

```{=html}
      </div>
    </div>
    
    
    <div class="g-col-8" id="compareall" style="height: 100vh; overflow-y: auto; display: none;">
    
      <div style="margin: 3vh;"></div>
      
```


::: {.callout-note appearance="simple" style="width: 50%; margin: auto;"}

This tool is under continuous development...check back later for more!

:::

```{=html}
    
    </div>
    
    
    <div class="g-col-2" style="height: 100vh; overflow-y: auto;">
    
      <div class="card text-bg-info mb-3" style="max-width: 24rem">
      
        <div style="font-size: 24px; text-align: center; margin: 5px; margin-top: 15px">
          <b><i class="bi bi-info-circle-fill"></i>  Sorry for the mess.</b>
        </div>
        
        <div class="card-body">
          
          <p class="card-text">This tool is under development, so many intended features and functionalities remain missing. Feedback is appreciated.</p>
        
        </div>
      
      </div>
    
    </div>
    
    
  </div>
</div>

```