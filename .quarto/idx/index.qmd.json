{"title":"target_cities <- city_geometry %>%","markdown":{"yaml":{"pagetitle":"Place & Equity","echo":false,"toc":false},"headingText":"target_cities <- city_geometry %>%","containsRefs":false,"markdown":"\n\n```{r setup, output=F}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(kableExtra)\nlibrary(cpaltemplates)\nlibrary(highcharter)\n\ncity_list <- list(\"Dallas, TX\", \"San Diego, CA\", \"Austin, TX\", \"Charlotte, NC\", \"Washington, DC\", \"Phoenix, AZ\", \"San Antonio, TX\", \"Atlanta, GA\", \"Houston, TX\", \"Miami, FL\", \"Philadelphia, PA\")\n\ngeographies <- c(\n  \"Block group\" = 1,\n  \"Tract\" = 2,\n  \"PUMA\" = 3,\n  \"Place\" = 4,\n  \"CSA\" = 5,\n  \"County\" = 6\n)\n\ncity_geometry <- tigris::places(year = 2022, cb = TRUE)\n\ndallas_remove <- sf::st_sfc(sf::st_polygon(list(matrix(c(\n  -96.6, 32.75,\n  -96.6, 33.1,\n  -96.3, 33.1,\n  -96.3, 32.75,\n  -96.6, 32.75\n), ncol = 2, byrow = TRUE))), crs = sf::st_crs(city_geometry))\n\n#   mutate(cityst = paste0(NAME, \", \", STUSPS)) %>%\n#   filter(cityst %in% city_list) %>%\n#   mutate(geometry = if_else(cityst == \"Dallas, TX\", \n#                             sf::st_difference(geometry, dallas_remove), \n#                             geometry)) %>%\n#   mutate(geometry = sf::st_simplify(geometry, dTolerance = 1))\ntarget_cities <- st_read(\"data/target_cities.geojson\")\n\n# city_plots <- lapply(target_cities$cityst, function(city) {\n#   city_data <- target_cities %>% filter(cityst == city)\n#   ggplot(city_data) + \n#     geom_sf(fill = \"grey10\", color = NA) +\n#     theme_void()\n# })\n\nfips_codes <- tidycensus::fips_codes %>%\n  mutate(CountyFIPS = paste0(state_code, county_code))\n\ntarget_counties <- st_read(\"data/target_counties.geojson\")\ntarget_metros <- st_read(\"data/target_metros.geojson\")\ntarget_tracts <- st_read(\"data/target_tracts.geojson\")\n# target_sds_TX <- st_read(\"data/target_sds_TX.geojson\")\n\n\n# targets <- bind_rows(\n#   target_counties %>%\n#     mutate(\n#       Geography = \"County\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID = CountyFIPS,\n#       NAME = NAME.x,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_metros %>%\n#     mutate(\n#       Geography = \"CSA\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_cities %>%\n#     mutate(\n#       Geography = \"Place\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_PUMAs %>%\n#     mutate(\n#       Geography = \"PUMA\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_tracts %>%\n#     mutate(\n#       Geography = \"Tract\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME = NAMELSAD.x,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_2019tracts %>%\n#     mutate(\n#       Geography = \"Tract (2019)\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME = NAMELSAD.x,\n#       City = cityst,\n#       geometry\n#     )\n# )\n# st_write(targets, \"data/targets.geojson\")\n\ntargets <- st_read(\"data/targets.geojson\")\n\npeer_medians <- read_csv(\"data/peer_medians.csv\")\n\ndallas_smallgeo <- read_csv(\"data/dallas_smallgeo.csv\", col_types = c(\"GEOID\" = \"character\")) %>%\n  left_join(\n    targets\n  ) %>%\n  st_as_sf()\n\nmetrics <- read_csv(\"data/smallest_geo_available.csv\") %>%\n  rowwise() %>%\n  mutate(\n    target = Metric,\n    sdf = list(filter(dallas_smallgeo, Metric == target))\n  ) %>%\n  ungroup() %>%\n  select(-target)\n\nacs_tract <- tidycensus::get_acs(\"tract\",\n                                 variables = c(\"pop_total\" = \"S1701_C01_001\", \n                                               \"pov_total\" = \"S1701_C02_001\", \n                                               \"pop_black\" = \"B01001B_001\", \n                                               \"pop_native\" = \"B01001C_001\", \n                                               \"pop_asian\" = \"B01001D_001\", \n                                               \"pop_pacific\" = \"B01001E_001\", \n                                               \"pop_otherrace\" = \"B01001F_001\", \n                                               \"pop_multirace\" = \"B01001G_001\", \n                                               \"pop_white\" = \"B01001H_001\", \n                                               \"pop_latino\" = \"B01001I_001\"),\n                                 year = 2022,\n                                 state = \"TX\",\n                                 county = c(\"Dallas\", \"Denton\", \"Collin County\", \"Kaufman\", \"Rockwall\"),\n                                 geometry = TRUE,\n                                 output = \"wide\") %>%\n  select(-ends_with(\"M\")) %>%\n  rename_with(~gsub(\"E$\", \"\", .), ends_with(\"E\")) %>%\n  mutate(\n    poppct_black = pop_black / pop_total,\n    poppct_asian = pop_asian / pop_total,\n    poppct_white = pop_white / pop_total,\n    poppct_latino = pop_latino / pop_total,\n    tract_sqmi = as.numeric(units::set_units(sf::st_area(geometry), mi^2)),\n    pop_density = pop_total/tract_sqmi,\n    pop_density_cut = ifelse(pop_density > 25000, 25000, pop_density)\n    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total,\n  ) %>%\n  mutate(\n    max_race_info = pmap(\n      list(poppct_black, poppct_asian, poppct_white, poppct_latino), \n      ~ {\n        percentages <- c(...); \n        names(percentages) <- c(\"Black\", \"Asian\", \"White\", \"Hispanic/Latino\");\n        sorted <- sort(percentages, decreasing = TRUE); \n        max_race <- names(sorted)[1]; \n        second_max_race <- names(sorted)[2]; \n        max_diff <- sorted[1] - sorted[2]; \n        list(max_race, max_diff)\n      }\n    )\n  ) %>%\n  unnest_wider(max_race_info, names_sep = \"_\") %>%\n  rename(\n    pop_largestrace = max_race_info_1,\n    pop_racediff = max_race_info_2\n  ) %>%\n  sf::st_as_sf() %>%\n  sf::st_set_crs(4269)\n\nacs_place <- tidycensus::get_acs(\"place\",\n                                 variables = c(\"pop_total\" = \"S1701_C01_001\", \n                                               \"pov_total\" = \"S1701_C02_001\", \n                                               \"pop_black\" = \"B01001B_001\", \n                                               \"pop_native\" = \"B01001C_001\", \n                                               \"pop_asian\" = \"B01001D_001\", \n                                               \"pop_pacific\" = \"B01001E_001\", \n                                               \"pop_otherrace\" = \"B01001F_001\", \n                                               \"pop_multirace\" = \"B01001G_001\", \n                                               \"pop_white\" = \"B01001H_001\", \n                                               \"pop_latino\" = \"B01001I_001\"),\n                                 year = 2022,\n                                 state = \"TX\",\n                                 geometry = TRUE,\n                                 output = \"wide\") %>%\n  filter(NAME == \"Dallas city, Texas\") %>%\n  select(-ends_with(\"M\")) %>%\n  rename_with(~gsub(\"E$\", \"\", .), ends_with(\"E\")) %>%\n  mutate(\n    poppct_black = pop_black / pop_total,\n    poppct_asian = pop_asian / pop_total,\n    poppct_white = pop_white / pop_total,\n    poppct_latino = pop_latino / pop_total,\n    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total\n  ) %>%\n  mutate(geometry = sf::st_difference(geometry, dallas_remove))\n\ndallas_tracts <- sf::st_join(acs_tract, acs_place, sf::st_intersects, suffix = c(\"\", \"_DAL\")) %>%\n  filter(!is.na(NAM_DAL)) %>%\n  select(geometry, everything()) %>%\n  sf::st_simplify(dTolerance = 1) %>%\n  mutate(\n    tract_area = sf::st_area(geometry)\n  ) %>%\n  rowwise() %>%\n  mutate(\n    intersection = tryCatch(\n      {\n        inter = sf::st_intersection(geometry, acs_place$geometry[1])\n        if (length(inter) == 0) { NA } else { inter }\n      },\n      error = function(e) NA\n    ),\n    intersection_area = ifelse(is.na(intersection), 0, sf::st_area(intersection)),\n    area_proportion = as.numeric(intersection_area / tract_area),\n    tract_name = str_remove(NAM, \";.*\")\n  ) %>%\n  ungroup() %>%\n  filter(area_proportion >= 0.20)\n# %>%  pivot_longer(4:(which(names(.) == \"GEOID_DAL\") - 1), names_to = \"variable\")\n\nbounds <- as.vector(sf::st_bbox(dallas_tracts))\n# hi taylor\n\n#### palettes ####\n\npalette <- cpaltemplates::palette_cpal_main\npalette <- c(palette[-1], palette[1])\n\n\nbinning <- function(n, color, na.color = \"#333333\") {\n  \n  color = if (color %% 8 == 0) {8} else {color %% 8}\n  \n  uniq <- unique(colorBin(\n          bins = 5,\n          colorRampPalette(c(\"#FFFFFF\", palette[[1]]))(5),\n          na.color = na.color,\n          pretty = TRUE,\n          domain = metrics$sdf[[n]]$all\n        )(metrics$sdf[[n]]$all))\n  \n  if (na.color %in% uniq) {n_bins <- length(uniq) - 1} else {n_bins <- length(uniq)}\n  \n  bin_palette <- colorRampPalette(c(\"#FFFFFF\", palette[[color]]))(n_bins)\n  \n  list(values = colorBin(\n          bins = n_bins,\n          bin_palette,\n          na.color = na.color,\n          pretty = TRUE,\n          domain = metrics$sdf[[n]]$all\n        )(metrics$sdf[[n]]$all),\n       breaks = classInt::classIntervals(\n          metrics$sdf[[n]]$all,\n          style = \"pretty\",\n          n = n_bins\n       )$brks,\n       n_bins = n_bins,\n       palette = bin_palette\n  )\n}\n\n#### bins_hc ####\n\nhc_cpal <- hc_theme(\n        chart = list(\n          backgroundColor = 'transparent',\n          style = list(\n            fontFamily = \"Inter\"\n          )\n        )\n      )\n\nbins_hc <- function(n, color, title = NULL, bin_labels = NULL, pct = FALSE, hover = NULL, axis_label = NULL, na.color = \"#333333\") {\n  \n  color = if (color %% 8 == 0) {8} else {color %% 8}\n  \n  bin_data <- binning(n, color, na.color)\n  breaks <- bin_data$breaks\n  \n  if (!is.null(bin_labels)) bin_labels <- bin_labels else if (pct) {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(scales::percent(breaks[i]), scales::percent(breaks[i+1]), sep = \"-\"))} else {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(breaks[i], breaks[i+1], sep = \"-\"))} %>% as.vector()\n  \n  bins <- bin_data$values %>% \n    table() %>% \n    as.data.frame() %>% \n    filter(`.` != \"#333333\") %>%\n    mutate(color = factor(`.`, levels = bin_data$palette)) %>%\n    select(-`.`) %>%\n    arrange(color) %>%\n    bind_cols(label = bin_labels)\n \n  chart <- bins %>%\n    hchart(\n      'column',\n      hcaes(x = label, y = Freq, color = color)\n    ) %>%\n    hc_size(height = \"25vh\", width = \"100%\") %>%\n    hc_xAxis(title = FALSE, labels = list(enabled = TRUE), gridLineWidth = 0, reversed = TRUE) %>%  \n    # hc_yAxis(title = ifelse(is.null(axis_label), FALSE, list(text = axis_label)), labels = list(enabled = FALSE), gridLineWidth = 0) %>%  \n    hc_yAxis(title = list(text = axis_label), labels = list(enabled = FALSE), gridLineWidth = 0) %>%\n    hc_chart(plotBackgroundColor = NULL, plotBorderWidth = 0, spacing = 10, inverted=TRUE) %>%\n    hc_plotOptions(column = list(borderWidth = 1, borderColor = 'lightgrey', pointWidth = 30,\n                                 pointPadding = 0, groupPadding = 0),\n                   states = list(hover = list(\n                                      enabled = TRUE,\n                                      brightness = -0.2))\n                   ) %>%\n    hc_legend(enabled = FALSE) %>%\n    hc_tooltip(formatter = JS(\"function() {\n                return this.x + ': ' + this.y; \n            }\")) %>%\n    hc_title(text = title) %>%\n    hc_add_theme(hc_cpal)\n    \n\n  \n  chart\n}\n\n```\n\n```{=html}\n<div class=\"column-screen-inset\">\n\n  <div class=\"centered\">\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n      <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"btn-dallas\" autocomplete=\"off\" checked=\"true\">\n      <label class=\"btn btn-secondary\" for=\"btn-dallas\">Dallas</label>\n  \n      <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"btn-dallaspeers\" autocomplete=\"off\">\n      <label class=\"btn btn-secondary\" for=\"btn-dallaspeers\">Dallas and Peers</label>\n  \n      <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"btn-compareall\" autocomplete=\"off\">\n      <label class=\"btn btn-secondary\" for=\"btn-compareall\">Compare all</label>\n    </div>\n  </div>\n  \n  <div class=\"grid\" style=\"--bs-gap: 2rem;\">\n    <div class=\"g-col-2 accordion lock-column\" id=\"accordionSidebar\" style=\"height: 100vh; overflow-y: auto;\">\n      <div class=\"flex-shrink-0 p-3 bg-white\">\n        <a href=\"#overview\" class=\"d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom\">\n          <svg class=\"bi pe-none me-2\" width=\"30\" height=\"24\"><use xlink:href=\"#bootstrap\"></use></svg>\n          <span class=\"fs-5 fw-semibold\">Overview</span>\n        </a>\n        <a href=\"#human-development\" class=\"d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom\">\n          <svg class=\"bi pe-none me-2\" width=\"30\" height=\"24\"><use xlink:href=\"#bootstrap\"></use></svg>\n          <span class=\"fs-5 fw-semibold\">Human Development</span>\n        </a>\n      </div>\n    </div>\n    \n    \n    \n    <div class=\"g-col-8 card\" id=\"dallas\" style=\"margin-top: 3vh;\">\n      <div class=\"card-body\">\n        <div class=\"grid\" style=\"--bs-columns: 5;\">\n          <div class=\"g-col-2\">\n            <h2 class=\"slim\" id=\"overview\">Overview</h2>\n            <div class=\"accordion\" id=\"overview\">\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#demographics\" aria-expanded=\"true\" aria-controls=\"demographics\">\n                    Demographics\n                  </button>\n                </b>\n                <div id=\"demographics\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#overview\">\n                  <div class=\"accordion-body\">\n                    <!-- <li><a href=\"#\" class=\"link-dark d-inline-flex text-decoration-none rounded\">Population</a></li> -->\n                    <!-- <li><a href=\"#\" class=\"link-dark d-inline-flex text-decoration-none rounded\">Race/ethnicity</a></li> -->\n                    <!-- <li><a href=\"#\" class=\"link-dark d-inline-flex text-decoration-none rounded\">Language spoken at home</a></li> -->\n                    <div class=\"list-group\">\n                      \n                      <a href=\"#\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\">\n                        <div class=\"button-content\" id=\"pop\">\n                          <span class=\"left-content\">Population</span>\n                          <span class=\"right-content\">\n                            `r scales::comma(acs_place$pop_total[1])`\n                          </span>\n                        </div>\n                      </a>\n                      \n                      <a href=\"#raceDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                        <div class=\"button-content\" id=\"race\">\n                          <span class=\"left-content\">Race/ethnicity...</span>\n                          <div class=\"button-content-details\" id=\"raceDetails\">\n                            <hr>\n                            <span class=\"left-content-indent\">White</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_white[1])`\n                            </span>\n                            <br>\n                            <span class=\"left-content-indent\">Black</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_black[1])`\n                            </span>\n                            <br>\n                            <span class=\"left-content-indent\">Hispanic/Latino</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_latino[1])`\n                            </span>\n                            <br>\n                            <span class=\"left-content-indent\">Asian</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_asian[1])`\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      \n                      <a href=\"#langDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-toggle=\"list\" data-bs-toggle=\"collapse\">\n                        <div class=\"button-content\" id=\"lang\">\n                          <span class=\"left-content\">Primary language spoken at home...</span>\n                          <div class=\"button-content-details\" id=\"langDetails\">\n                            <hr>\n                            <span class=\"left-content-indent\">English</span>\n                            <span class=\"right-content\">60%</span>\n                            <br>\n                            <span class=\"left-content-indent\">Spanish</span>\n                            <span class=\"right-content\">30%</span>\n                            <br>\n                            <span class=\"left-content-indent\">Vietnamese</span>\n                            <span class=\"right-content\">5%</span>\n                            <br>\n                            <span class=\"left-content-indent\">Other</span>\n                            <span class=\"right-content\">5%</span>\n                          </div>\n                        </div>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"g-col-3\">\n            <div class=\"card box-of-map\">\n```\n  \n  \n```{r overview-map}\n\nleaflet(data = dallas_tracts, \n        elementId = \"map_overview\",\n        options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )) %>%\n  \n  # Add base\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  \n  # City outline default\n  addPolygons(\n    # group = \"none\",\n    data = acs_place,\n    fillColor = \"#333333\",\n    fillOpacity = 0.05, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  # County outline default\n  addPolygons(\n    # group = \"none\",\n    data = target_counties %>% filter(CountyFIPS == 48113),\n    fillColor = \"#333333\",\n    fillOpacity = 0.0, weight = 2, color = \"#333333\",\n    opacity = 0.1,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  # Population by tract\n  addPolygons(\n    group = \"pop\",\n    fillColor = \"#325d88\",\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup =\n      paste0(\n        \"<i>\", dallas_tracts$tract_name, \"</i><br/>\",\n        \"<b>Population:</b> \", scales::comma(dallas_tracts$pop_total), \"<br/>\",\n        \"<b>Density:</b> \", scales::comma(dallas_tracts$pop_density), \"/mi<sup>2</sup>\"\n      )\n    ) %>%\n\n  # Race/ethnicity by tract\n  addPolygons(\n    group = \"race\",\n    fillColor = ~colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace)(pop_largestrace),\n    fillOpacity = ~as.numeric(pop_racediff) + (1 - max(dallas_tracts$pop_racediff, na.rm = T))/2, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    popup = paste0(\n        \"<i>\", dallas_tracts$tract_name, \"</i><br/>\",\n        \"<b>Asian:</b> \", scales::comma(dallas_tracts$pop_asian), \" (\", scales::percent(dallas_tracts$poppct_asian), \")<br/>\",\n        \"<b>Black:</b> \", scales::comma(dallas_tracts$pop_black), \" (\", scales::percent(dallas_tracts$poppct_black), \")<br/>\",\n        \"<b>Hispanic/Latino:</b> \", scales::comma(dallas_tracts$pop_latino), \" (\", scales::percent(dallas_tracts$poppct_latino), \")<br/>\",\n        \"<b>White:</b> \", scales::comma(dallas_tracts$pop_white), \" (\", scales::percent(dallas_tracts$poppct_white), \")\"\n    )\n  ) %>%\n\n  addLegend(\n    group = \"race\",\n    layerId = \"race\",\n    \"bottomright\",\n    pal = colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace, na.color=NULL),\n    values = ~pop_largestrace,\n    title = \"Race\",\n    opacity = 0.7\n  ) %>%\n  \n  # Map bounds\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%\n  \n  # Layers control\n  addLayersControl(\n    baseGroups = c(\"none\", \"pop\", \"race\")\n  ) %>% \n  htmlwidgets::onRender(\"\n    function(el, x) {\n      var map_overview = this;\n\n      function toggleLayer(layerName) {\n        var input = $(map_overview.getContainer()).find('.leaflet-control-layers-selector').filter(function() {\n          return $(this).next('span').text().trim() === layerName;\n        });\n      \n        if(input.length) {\n          input[0].click();\n        }\n      };\n      \n      $('#pop').on('click', function() {\n        console.log('Pop clicked');\n        toggleLayer('pop');\n      });\n      \n      $('#race').on('click', function() {\n        console.log('Race clicked');\n        toggleLayer('race');\n      });\n      \n      $('#lang').on('click', function() {\n        console.log('Lang clicked');\n        toggleLayer('lang');\n      });\n      \n      $('.info.legend.leaflet-control').hide();\n      map_overview.on('overlayadd', function(eventLayer) {\n        if (eventLayer.name === 'race') {\n            $('.info.legend.leaflet-control').show();\n        } else {\n            $('.info.legend.leaflet-control').hide();\n        }\n      });\n    }\n  \")\n```\n  \n  \n```{=html}\n            </div>\n          </div>\n        </div>\n        \n        <hr/>\n        \n        <div class=\"grid\" style=\"--bs-columns: 5;\">\n          <div class=\"g-col-2\">\n            <h2 class=\"slim\" id=\"human-development\">Human Development</h2>\n            <div class=\"accordion\" id=\"human-development\">\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#hqa\" aria-expanded=\"true\" aria-controls=\"hqa\">\n                    Housing Quality and Affordability\n                  </button>\n                </b>\n                <div id=\"hqa\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#human-development\">\n                  <div class=\"accordion-body\">\n                      \n                    <a href=\"#overcrowdedDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"overcrowded-housing\">\n                        <span>Overcrowded housing (%)</span>\n                        <div class=\"button-content-details\" id=\"overcrowdedDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=1, color=1, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. tracts\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#rentburdenDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"rent-burden\">\n                        <span>Rent burden</span>\n                        <div class=\"button-content-details\" id=\"rentburdenDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=2, color=2, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#unhousedratesDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\">\n                      <div class=\"button-content\" id=\"unhoused-rates\">\n                        <span>Unhoused rates</span>\n                        <div class=\"button-content-details\" id=\"rentburdenDetails\">\n                          <div class=\"histogram card\">\n                          The unhoused rate for North Texas is 1 in `r scales::number(1/metrics$sdf[[3]]$all, accuracy = 1)` people.\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                      \n                  </div>\n                </div>\n              </div>\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#hfi\" aria-expanded=\"true\" aria-controls=\"hfi\">\n                    Healthy Family & Individuals\n                  </button>\n                </b>\n                <div id=\"hfi\" class=\"accordion-collapse collapse\" data-bs-parent=\"#human-development\">\n                  <div class=\"accordion-body\">\n                      \n                    <a href=\"#uninsuredDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"uninsured-population\">\n                        <span>Uninsured population</span>\n                        <div class=\"button-content-details\" id=\"uninsuredDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=4, color=4, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. tracts\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#lifeexpDetails\" class=\"list-group-item list-group-item-action disabled\" aria-expanded=\"false\" aria-disabled=\"true\">\n                      <div class=\"button-content\" id=\"life-expectancy\">\n                        <span>Life expectancy</span>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#healthindexDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"health-index\">\n                        <span>Health index</span>\n                        <div class=\"button-content-details\" id=\"healthindexDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=6, color=6, title = NULL, bin_labels = NULL, pct = FALSE, axis_label = \"Num. tracts\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                  </div>\n                </div>\n              </div>\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#trn\" aria-expanded=\"true\" aria-controls=\"trn\">\n                    Transportation\n                  </button>\n                </b>\n                <div id=\"trn\" class=\"accordion-collapse collapse\" data-bs-parent=\"#human-development\">\n                  <div class=\"accordion-body\">\n                      \n                    <a href=\"#longpubDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"pub-commute-long\">\n                        <span class=\"left-content\">Long public commute</span>\n                        <div class=\"button-content-details\" id=\"longpubDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=7, color=7, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#longprivDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"priv-commute-long\">\n                        <span class=\"left-content\">Long private commute</span>\n                        <div class=\"button-content-details\" id=\"longprivDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=8, color=8, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#pubcomDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"pub-commute\">\n                        <span class=\"left-content\">Public commuters</span>\n                        <div class=\"button-content-details\" id=\"pubcomDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=9, color=9, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#privcomDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"priv-commute\">\n                        <span class=\"left-content\">Private commuters</span>\n<div class=\"button-content-details\" id=\"privcomDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=10, color=10, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#novehDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"no-vehicle\">\n                        <span class=\"left-content\">Households with no vehicle</span>\n                      </div>\n                    </a>\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"g-col-3\">\n            <div class=\"card box-of-map\">\n```\n  \n  \n```{r map-hd}\n\nleaflet(data = dallas_smallgeo, \n        elementId = \"map-hd\",\n        options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )) %>%\n  \n  # Add base\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  \n  # City outline default\n  addPolygons(\n    # group = \"none\",\n    data = acs_place,\n    fillColor = \"#333333\",\n    fillOpacity = 0.05, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  # County outline default\n  addPolygons(\n    # group = \"none\",\n    data = target_counties %>% filter(CountyFIPS == 48113),\n    fillColor = \"#333333\",\n    fillOpacity = 0.0, weight = 2, color = \"#333333\",\n    opacity = 0.1,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  addPolygons(\n    group = \"overcrowded-housing\",\n    data = metrics$sdf[[1]],\n    fillColor = ~colorBin(palette = binning(1, 1)$palette, domain = c(0, max(metrics$sdf[[1]]$all, na.rm = TRUE)))(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup =\n      paste0(\n        \"<i>\", metrics$sdf[[1]]$NAME, \"</i><br/>\",\n        \"<b>Pct in overcrowded housing:</b> \", scales::percent(metrics$sdf[[1]]$all, accuracy = 0.1)\n      )\n    ) %>%\n  \n  addPolygons(\n    group = \"rent-burden\",\n    data = metrics$sdf[[2]],\n    fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),\n    fillOpacity = 0.5,\n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n     highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = \n      paste0(\n        \"<i>\", metrics$sdf[[2]]$NAME, \"</i><br/>\",\n        \"<b>Pct households with rent more than 30% of income:</b> \", scales::percent(metrics$sdf[[2]]$all, accuracy = 0.1)\n      )\n    ) %>%\n\n  # addPolygons(\n  #   group = \"unhoused-rates\",\n  #   data = metrics$sdf[[3]],\n  #   fillColor = ~colorNumeric(palette = binning(3, 3)$palette, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),\n  #   fillOpacity = 0.5, \n  #   stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n  #   highlight = highlightOptions(\n  #               opacity = 0.5,\n  #               bringToFront = TRUE,\n  #               sendToBack = TRUE),\n  #   popup = paste0(\n  #       \"<i>\", metrics$sdf[[3]]$NAME, \"</i><br/>\",\n  #       \"<b>Pct individuals experiencing homelessness:</b> \", scales::percent(metrics$sdf[[3]]$all, accuracy = 0.1)\n  #     )\n  # ) %>%\n  \n  addPolygons(\n    group = \"uninsured-population\",\n    data = metrics$sdf[[4]],\n    fillColor = ~colorNumeric(palette = binning(4, 4)$palette, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[4]]$NAME, \"</i><br/>\",\n        \"<b>Pct individuals uninsured:</b> \", scales::percent(metrics$sdf[[4]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  # \n  # addPolygons(\n  #   group = metrics$Metric[5],\n  #   data = metrics$sdf[[5]],\n  #   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),\n  #   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,\n  #   weight = 1,\n  #   color = \"#FFFFFF\",\n  #   # dashArray = \"3\",\n  #   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {\n  #     htmltools::HTML(paste0(\n  #       \"<i>\", metrics$sdf[[5]]$NAME, \"</i><br/>\",\n  #       \"<b>Life expectancy:</b> \", scales::percent(metrics$sdf[[5]]$all)\n  #     ))\n  #   }),\n  #   labelOptions = labelOptions(direction = 'auto', html = TRUE)\n  # ) %>%\n  \n    \n  addPolygons(\n    group = \"health-index\",\n    data = metrics$sdf[[6]],\n    fillColor = ~colorNumeric(palette = binning(6, 6)$palette, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[6]]$NAME, \"</i><br/>\",\n        \"<b>Health index:</b> \", scales::number(metrics$sdf[[6]]$all, accuracy = 0.001), \"<br/>\",\n        \"<br/>\",\n        \"<i><sup>*Lower index score is better</sup></i>\"\n      )\n  ) %>%\n\n  addPolygons(\n    group = \"pub-commute-long\",\n    data = metrics$sdf[[7]],\n    fillColor = ~colorNumeric(palette = binning(7, 7)$palette, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[7]]$NAME, \"</i><br/>\",\n        \"<b>Percent longer public commute than 45 min.:</b> \", scales::percent(metrics$sdf[[7]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  addPolygons(\n    group = \"priv-commute-long\",\n    data = metrics$sdf[[8]],\n    fillColor = ~colorNumeric(palette = binning(8, 8)$palette, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[8]]$NAME, \"</i><br/>\",\n        \"<b>Percent longer private commute than 45 min.:</b> \", scales::percent(metrics$sdf[[8]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  addPolygons(\n    group = \"pub-commute\",\n    data = metrics$sdf[[9]],\n    fillColor = ~colorNumeric(palette = binning(9, 9)$palette, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[9]]$NAME, \"</i><br/>\",\n        \"<b>Percent using public commute:</b> \", scales::percent(metrics$sdf[[9]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  addPolygons(\n    group = \"priv-commute\",\n    data = metrics$sdf[[10]],\n    fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[10]]$NAME, \"</i><br/>\",\n        \"<b>Percent using private commute:</b> \", scales::percent(metrics$sdf[[10]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  # Map bounds\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%\n\n  # Layers control\n  addLayersControl(\n    baseGroups = c(\"None\", \"overcrowded-housing\", \"rent-burden\", \"unhoused-rates\", \"uninsured-population\", \"life-expectancy\", \"health-index\", \"pub-commute-long\", \"priv-commute-long\", \"pub-commute\", \"priv-commute\", \"no-vehicle\", metrics$Metric)\n  ) %>%\n  htmlwidgets::onRender(paste0(\"\n    function(el, x) {\n      var map_metrics = this;\n\n      function toggleLayer(layerName) {\n        var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {\n          return $(this).next('span').text().trim() === layerName;\n        });\n\n        if(input.length) {\n          input[0].click();\n        }\n      };\n\n      $('#overcrowded-housing').on('click', function() {\n        toggleLayer('overcrowded-housing');\n      });\n\n      $('#rent-burden').on('click', function() {\n        toggleLayer('rent-burden');\n      });\n\n      $('#unhoused-rates').on('click', function() {\n        toggleLayer('None');\n      });\n\n      $('#uninsured-population').on('click', function() {\n        toggleLayer('uninsured-population');\n      });\n\n      $('#health-index').on('click', function() {\n        toggleLayer('health-index');\n      });\n\n      $('#pub-commute-long').on('click', function() {\n        toggleLayer('pub-commute-long');\n      });\n\n      $('#priv-commute-long').on('click', function() {\n        toggleLayer('priv-commute-long');\n      });\n\n      $('#pub-commute').on('click', function() {\n        toggleLayer('pub-commute');\n      });\n\n      $('#priv-commute').on('click', function() {\n        toggleLayer('priv-commute');\n      });\n\n      $('#no-vehicle').on('click', function() {\n        toggleLayer('no-vehicle');\n      });\n\n    }\n  \"))\n\n```\n  \n  \n```{=html}\n            </div>\n          </div>\n        </div>\n        \n        \n        <hr/>\n        \n        \n        \n      </div>\n    </div>\n    \n    <div class=\"g-col-8 card\" id=\"dallaspeers\" style=\"height: 100vh; overflow-y: auto; margin-top: 3vh; display: none;\"> \n      <div class=\"card-body\">\n        \n```     \n\n```{r peer_medians, output = 'asis'}\n\nfor(system in peer_medians %>% distinct(System) %>% pull()) {\n  cat(\"##\", system, \"\\n\")\n\n  cat(\"<div class=\\\"indent\\\">\")\n  \n  for(area in peer_medians %>% filter(System == system) %>% distinct(Area) %>% pull()) {\n    cat(\"###\", area, \"\\n\")\n    \n    # Generate and mutate the table\n    display <- peer_medians %>%\n      filter(System == system, Area == area) %>%\n      mutate(\n        PeerMedian = case_when(\n          Measure == \"%\" ~ scales::percent(PeerMedian),\n          TRUE ~ scales::number(PeerMedian)\n        ),\n        BestPeer = case_when(\n          Measure == \"%\" ~ scales::percent(BestPeer),\n          TRUE ~ scales::number(BestPeer)\n        ),\n        Dallas = case_when(\n          Measure == \"%\" ~ scales::percent(Dallas),\n          TRUE ~ scales::number(Dallas)\n        ),\n        DallasRank = scales::number(DallasRank)\n      ) %>%\n      select(\n        \"Metric\" = Metric,\n        Dallas,\n        \"Dallas Rank\" = DallasRank,\n        \"Peer Median\" = PeerMedian,\n        \"Best Peer\" = BestPeer\n      )\n    \n    display %>%\n      kable() %>%\n      kable_styling(fixed_thead = T) %>%\n      column_spec(1, width = \"40vw\") %>%\n      column_spec(2, width = \"10vw\") %>%\n      column_spec(3, width = \"10vw\") %>%\n      column_spec(4, width = \"10vw\") %>%\n      column_spec(5, width = \"10vw\") %>%\n      print()\n  }\n  \n  cat(\"</div>\")\n  \n}\n\n\n```\n\n```{=html}\n      </div>\n    </div>\n    \n    \n    <div class=\"g-col-8\" id=\"compareall\" style=\"height: 100vh; overflow-y: auto; display: none;\">\n    \n      <div style=\"margin: 3vh;\"></div>\n      \n```\n\n\n::: {.callout-note appearance=\"simple\" style=\"width: 50%; margin: auto;\"}\n\nThis tool is under continuous development...check back later for more!\n\n:::\n\n```{=html}\n    \n    </div>\n    \n    \n    <div class=\"g-col-2\" style=\"height: 100vh; overflow-y: auto;\">\n    \n      <div class=\"card text-bg-info mb-3\" style=\"max-width: 24rem\">\n      \n        <div style=\"font-size: 24px; text-align: center; margin: 5px; margin-top: 15px\">\n          <b><i class=\"bi bi-info-circle-fill\"></i>  Sorry for the mess.</b>\n        </div>\n        \n        <div class=\"card-body\">\n          \n          <p class=\"card-text\">This tool is under development, so many intended features and functionalities remain missing. Feedback is appreciated.</p>\n        \n        </div>\n      \n      </div>\n    \n    </div>\n    \n    \n  </div>\n</div>\n\n```","srcMarkdownNoYaml":"\n\n```{r setup, output=F}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(leaflet)\nlibrary(kableExtra)\nlibrary(cpaltemplates)\nlibrary(highcharter)\n\ncity_list <- list(\"Dallas, TX\", \"San Diego, CA\", \"Austin, TX\", \"Charlotte, NC\", \"Washington, DC\", \"Phoenix, AZ\", \"San Antonio, TX\", \"Atlanta, GA\", \"Houston, TX\", \"Miami, FL\", \"Philadelphia, PA\")\n\ngeographies <- c(\n  \"Block group\" = 1,\n  \"Tract\" = 2,\n  \"PUMA\" = 3,\n  \"Place\" = 4,\n  \"CSA\" = 5,\n  \"County\" = 6\n)\n\ncity_geometry <- tigris::places(year = 2022, cb = TRUE)\n\ndallas_remove <- sf::st_sfc(sf::st_polygon(list(matrix(c(\n  -96.6, 32.75,\n  -96.6, 33.1,\n  -96.3, 33.1,\n  -96.3, 32.75,\n  -96.6, 32.75\n), ncol = 2, byrow = TRUE))), crs = sf::st_crs(city_geometry))\n\n# target_cities <- city_geometry %>%\n#   mutate(cityst = paste0(NAME, \", \", STUSPS)) %>%\n#   filter(cityst %in% city_list) %>%\n#   mutate(geometry = if_else(cityst == \"Dallas, TX\", \n#                             sf::st_difference(geometry, dallas_remove), \n#                             geometry)) %>%\n#   mutate(geometry = sf::st_simplify(geometry, dTolerance = 1))\ntarget_cities <- st_read(\"data/target_cities.geojson\")\n\n# city_plots <- lapply(target_cities$cityst, function(city) {\n#   city_data <- target_cities %>% filter(cityst == city)\n#   ggplot(city_data) + \n#     geom_sf(fill = \"grey10\", color = NA) +\n#     theme_void()\n# })\n\nfips_codes <- tidycensus::fips_codes %>%\n  mutate(CountyFIPS = paste0(state_code, county_code))\n\ntarget_counties <- st_read(\"data/target_counties.geojson\")\ntarget_metros <- st_read(\"data/target_metros.geojson\")\ntarget_tracts <- st_read(\"data/target_tracts.geojson\")\n# target_sds_TX <- st_read(\"data/target_sds_TX.geojson\")\n\n\n# targets <- bind_rows(\n#   target_counties %>%\n#     mutate(\n#       Geography = \"County\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID = CountyFIPS,\n#       NAME = NAME.x,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_metros %>%\n#     mutate(\n#       Geography = \"CSA\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_cities %>%\n#     mutate(\n#       Geography = \"Place\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_PUMAs %>%\n#     mutate(\n#       Geography = \"PUMA\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_tracts %>%\n#     mutate(\n#       Geography = \"Tract\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME = NAMELSAD.x,\n#       City = cityst,\n#       geometry\n#     ),\n#   target_2019tracts %>%\n#     mutate(\n#       Geography = \"Tract (2019)\"\n#     ) %>%\n#     select(\n#       Geography,\n#       GEOID,\n#       NAME = NAMELSAD.x,\n#       City = cityst,\n#       geometry\n#     )\n# )\n# st_write(targets, \"data/targets.geojson\")\n\ntargets <- st_read(\"data/targets.geojson\")\n\npeer_medians <- read_csv(\"data/peer_medians.csv\")\n\ndallas_smallgeo <- read_csv(\"data/dallas_smallgeo.csv\", col_types = c(\"GEOID\" = \"character\")) %>%\n  left_join(\n    targets\n  ) %>%\n  st_as_sf()\n\nmetrics <- read_csv(\"data/smallest_geo_available.csv\") %>%\n  rowwise() %>%\n  mutate(\n    target = Metric,\n    sdf = list(filter(dallas_smallgeo, Metric == target))\n  ) %>%\n  ungroup() %>%\n  select(-target)\n\nacs_tract <- tidycensus::get_acs(\"tract\",\n                                 variables = c(\"pop_total\" = \"S1701_C01_001\", \n                                               \"pov_total\" = \"S1701_C02_001\", \n                                               \"pop_black\" = \"B01001B_001\", \n                                               \"pop_native\" = \"B01001C_001\", \n                                               \"pop_asian\" = \"B01001D_001\", \n                                               \"pop_pacific\" = \"B01001E_001\", \n                                               \"pop_otherrace\" = \"B01001F_001\", \n                                               \"pop_multirace\" = \"B01001G_001\", \n                                               \"pop_white\" = \"B01001H_001\", \n                                               \"pop_latino\" = \"B01001I_001\"),\n                                 year = 2022,\n                                 state = \"TX\",\n                                 county = c(\"Dallas\", \"Denton\", \"Collin County\", \"Kaufman\", \"Rockwall\"),\n                                 geometry = TRUE,\n                                 output = \"wide\") %>%\n  select(-ends_with(\"M\")) %>%\n  rename_with(~gsub(\"E$\", \"\", .), ends_with(\"E\")) %>%\n  mutate(\n    poppct_black = pop_black / pop_total,\n    poppct_asian = pop_asian / pop_total,\n    poppct_white = pop_white / pop_total,\n    poppct_latino = pop_latino / pop_total,\n    tract_sqmi = as.numeric(units::set_units(sf::st_area(geometry), mi^2)),\n    pop_density = pop_total/tract_sqmi,\n    pop_density_cut = ifelse(pop_density > 25000, 25000, pop_density)\n    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total,\n  ) %>%\n  mutate(\n    max_race_info = pmap(\n      list(poppct_black, poppct_asian, poppct_white, poppct_latino), \n      ~ {\n        percentages <- c(...); \n        names(percentages) <- c(\"Black\", \"Asian\", \"White\", \"Hispanic/Latino\");\n        sorted <- sort(percentages, decreasing = TRUE); \n        max_race <- names(sorted)[1]; \n        second_max_race <- names(sorted)[2]; \n        max_diff <- sorted[1] - sorted[2]; \n        list(max_race, max_diff)\n      }\n    )\n  ) %>%\n  unnest_wider(max_race_info, names_sep = \"_\") %>%\n  rename(\n    pop_largestrace = max_race_info_1,\n    pop_racediff = max_race_info_2\n  ) %>%\n  sf::st_as_sf() %>%\n  sf::st_set_crs(4269)\n\nacs_place <- tidycensus::get_acs(\"place\",\n                                 variables = c(\"pop_total\" = \"S1701_C01_001\", \n                                               \"pov_total\" = \"S1701_C02_001\", \n                                               \"pop_black\" = \"B01001B_001\", \n                                               \"pop_native\" = \"B01001C_001\", \n                                               \"pop_asian\" = \"B01001D_001\", \n                                               \"pop_pacific\" = \"B01001E_001\", \n                                               \"pop_otherrace\" = \"B01001F_001\", \n                                               \"pop_multirace\" = \"B01001G_001\", \n                                               \"pop_white\" = \"B01001H_001\", \n                                               \"pop_latino\" = \"B01001I_001\"),\n                                 year = 2022,\n                                 state = \"TX\",\n                                 geometry = TRUE,\n                                 output = \"wide\") %>%\n  filter(NAME == \"Dallas city, Texas\") %>%\n  select(-ends_with(\"M\")) %>%\n  rename_with(~gsub(\"E$\", \"\", .), ends_with(\"E\")) %>%\n  mutate(\n    poppct_black = pop_black / pop_total,\n    poppct_asian = pop_asian / pop_total,\n    poppct_white = pop_white / pop_total,\n    poppct_latino = pop_latino / pop_total,\n    # poppct_other = (pop_native + pop_pacific + pop_otherrace + pop_multirace) / pop_total\n  ) %>%\n  mutate(geometry = sf::st_difference(geometry, dallas_remove))\n\ndallas_tracts <- sf::st_join(acs_tract, acs_place, sf::st_intersects, suffix = c(\"\", \"_DAL\")) %>%\n  filter(!is.na(NAM_DAL)) %>%\n  select(geometry, everything()) %>%\n  sf::st_simplify(dTolerance = 1) %>%\n  mutate(\n    tract_area = sf::st_area(geometry)\n  ) %>%\n  rowwise() %>%\n  mutate(\n    intersection = tryCatch(\n      {\n        inter = sf::st_intersection(geometry, acs_place$geometry[1])\n        if (length(inter) == 0) { NA } else { inter }\n      },\n      error = function(e) NA\n    ),\n    intersection_area = ifelse(is.na(intersection), 0, sf::st_area(intersection)),\n    area_proportion = as.numeric(intersection_area / tract_area),\n    tract_name = str_remove(NAM, \";.*\")\n  ) %>%\n  ungroup() %>%\n  filter(area_proportion >= 0.20)\n# %>%  pivot_longer(4:(which(names(.) == \"GEOID_DAL\") - 1), names_to = \"variable\")\n\nbounds <- as.vector(sf::st_bbox(dallas_tracts))\n# hi taylor\n\n#### palettes ####\n\npalette <- cpaltemplates::palette_cpal_main\npalette <- c(palette[-1], palette[1])\n\n\nbinning <- function(n, color, na.color = \"#333333\") {\n  \n  color = if (color %% 8 == 0) {8} else {color %% 8}\n  \n  uniq <- unique(colorBin(\n          bins = 5,\n          colorRampPalette(c(\"#FFFFFF\", palette[[1]]))(5),\n          na.color = na.color,\n          pretty = TRUE,\n          domain = metrics$sdf[[n]]$all\n        )(metrics$sdf[[n]]$all))\n  \n  if (na.color %in% uniq) {n_bins <- length(uniq) - 1} else {n_bins <- length(uniq)}\n  \n  bin_palette <- colorRampPalette(c(\"#FFFFFF\", palette[[color]]))(n_bins)\n  \n  list(values = colorBin(\n          bins = n_bins,\n          bin_palette,\n          na.color = na.color,\n          pretty = TRUE,\n          domain = metrics$sdf[[n]]$all\n        )(metrics$sdf[[n]]$all),\n       breaks = classInt::classIntervals(\n          metrics$sdf[[n]]$all,\n          style = \"pretty\",\n          n = n_bins\n       )$brks,\n       n_bins = n_bins,\n       palette = bin_palette\n  )\n}\n\n#### bins_hc ####\n\nhc_cpal <- hc_theme(\n        chart = list(\n          backgroundColor = 'transparent',\n          style = list(\n            fontFamily = \"Inter\"\n          )\n        )\n      )\n\nbins_hc <- function(n, color, title = NULL, bin_labels = NULL, pct = FALSE, hover = NULL, axis_label = NULL, na.color = \"#333333\") {\n  \n  color = if (color %% 8 == 0) {8} else {color %% 8}\n  \n  bin_data <- binning(n, color, na.color)\n  breaks <- bin_data$breaks\n  \n  if (!is.null(bin_labels)) bin_labels <- bin_labels else if (pct) {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(scales::percent(breaks[i]), scales::percent(breaks[i+1]), sep = \"-\"))} else {bin_labels <- sapply(1:(length(breaks) - 1), function(i) paste(breaks[i], breaks[i+1], sep = \"-\"))} %>% as.vector()\n  \n  bins <- bin_data$values %>% \n    table() %>% \n    as.data.frame() %>% \n    filter(`.` != \"#333333\") %>%\n    mutate(color = factor(`.`, levels = bin_data$palette)) %>%\n    select(-`.`) %>%\n    arrange(color) %>%\n    bind_cols(label = bin_labels)\n \n  chart <- bins %>%\n    hchart(\n      'column',\n      hcaes(x = label, y = Freq, color = color)\n    ) %>%\n    hc_size(height = \"25vh\", width = \"100%\") %>%\n    hc_xAxis(title = FALSE, labels = list(enabled = TRUE), gridLineWidth = 0, reversed = TRUE) %>%  \n    # hc_yAxis(title = ifelse(is.null(axis_label), FALSE, list(text = axis_label)), labels = list(enabled = FALSE), gridLineWidth = 0) %>%  \n    hc_yAxis(title = list(text = axis_label), labels = list(enabled = FALSE), gridLineWidth = 0) %>%\n    hc_chart(plotBackgroundColor = NULL, plotBorderWidth = 0, spacing = 10, inverted=TRUE) %>%\n    hc_plotOptions(column = list(borderWidth = 1, borderColor = 'lightgrey', pointWidth = 30,\n                                 pointPadding = 0, groupPadding = 0),\n                   states = list(hover = list(\n                                      enabled = TRUE,\n                                      brightness = -0.2))\n                   ) %>%\n    hc_legend(enabled = FALSE) %>%\n    hc_tooltip(formatter = JS(\"function() {\n                return this.x + ': ' + this.y; \n            }\")) %>%\n    hc_title(text = title) %>%\n    hc_add_theme(hc_cpal)\n    \n\n  \n  chart\n}\n\n```\n\n```{=html}\n<div class=\"column-screen-inset\">\n\n  <div class=\"centered\">\n    <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n      <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"btn-dallas\" autocomplete=\"off\" checked=\"true\">\n      <label class=\"btn btn-secondary\" for=\"btn-dallas\">Dallas</label>\n  \n      <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"btn-dallaspeers\" autocomplete=\"off\">\n      <label class=\"btn btn-secondary\" for=\"btn-dallaspeers\">Dallas and Peers</label>\n  \n      <input type=\"radio\" class=\"btn-check\" name=\"options\" id=\"btn-compareall\" autocomplete=\"off\">\n      <label class=\"btn btn-secondary\" for=\"btn-compareall\">Compare all</label>\n    </div>\n  </div>\n  \n  <div class=\"grid\" style=\"--bs-gap: 2rem;\">\n    <div class=\"g-col-2 accordion lock-column\" id=\"accordionSidebar\" style=\"height: 100vh; overflow-y: auto;\">\n      <div class=\"flex-shrink-0 p-3 bg-white\">\n        <a href=\"#overview\" class=\"d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom\">\n          <svg class=\"bi pe-none me-2\" width=\"30\" height=\"24\"><use xlink:href=\"#bootstrap\"></use></svg>\n          <span class=\"fs-5 fw-semibold\">Overview</span>\n        </a>\n        <a href=\"#human-development\" class=\"d-flex align-items-center pb-3 mb-3 link-dark text-decoration-none border-bottom\">\n          <svg class=\"bi pe-none me-2\" width=\"30\" height=\"24\"><use xlink:href=\"#bootstrap\"></use></svg>\n          <span class=\"fs-5 fw-semibold\">Human Development</span>\n        </a>\n      </div>\n    </div>\n    \n    \n    \n    <div class=\"g-col-8 card\" id=\"dallas\" style=\"margin-top: 3vh;\">\n      <div class=\"card-body\">\n        <div class=\"grid\" style=\"--bs-columns: 5;\">\n          <div class=\"g-col-2\">\n            <h2 class=\"slim\" id=\"overview\">Overview</h2>\n            <div class=\"accordion\" id=\"overview\">\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#demographics\" aria-expanded=\"true\" aria-controls=\"demographics\">\n                    Demographics\n                  </button>\n                </b>\n                <div id=\"demographics\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#overview\">\n                  <div class=\"accordion-body\">\n                    <!-- <li><a href=\"#\" class=\"link-dark d-inline-flex text-decoration-none rounded\">Population</a></li> -->\n                    <!-- <li><a href=\"#\" class=\"link-dark d-inline-flex text-decoration-none rounded\">Race/ethnicity</a></li> -->\n                    <!-- <li><a href=\"#\" class=\"link-dark d-inline-flex text-decoration-none rounded\">Language spoken at home</a></li> -->\n                    <div class=\"list-group\">\n                      \n                      <a href=\"#\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\">\n                        <div class=\"button-content\" id=\"pop\">\n                          <span class=\"left-content\">Population</span>\n                          <span class=\"right-content\">\n                            `r scales::comma(acs_place$pop_total[1])`\n                          </span>\n                        </div>\n                      </a>\n                      \n                      <a href=\"#raceDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                        <div class=\"button-content\" id=\"race\">\n                          <span class=\"left-content\">Race/ethnicity...</span>\n                          <div class=\"button-content-details\" id=\"raceDetails\">\n                            <hr>\n                            <span class=\"left-content-indent\">White</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_white[1])`\n                            </span>\n                            <br>\n                            <span class=\"left-content-indent\">Black</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_black[1])`\n                            </span>\n                            <br>\n                            <span class=\"left-content-indent\">Hispanic/Latino</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_latino[1])`\n                            </span>\n                            <br>\n                            <span class=\"left-content-indent\">Asian</span>\n                            <span class=\"right-content\">\n                              `r scales::percent(acs_place$poppct_asian[1])`\n                            </span>\n                          </div>\n                        </div>\n                      </a>\n                      \n                      <a href=\"#langDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-toggle=\"list\" data-bs-toggle=\"collapse\">\n                        <div class=\"button-content\" id=\"lang\">\n                          <span class=\"left-content\">Primary language spoken at home...</span>\n                          <div class=\"button-content-details\" id=\"langDetails\">\n                            <hr>\n                            <span class=\"left-content-indent\">English</span>\n                            <span class=\"right-content\">60%</span>\n                            <br>\n                            <span class=\"left-content-indent\">Spanish</span>\n                            <span class=\"right-content\">30%</span>\n                            <br>\n                            <span class=\"left-content-indent\">Vietnamese</span>\n                            <span class=\"right-content\">5%</span>\n                            <br>\n                            <span class=\"left-content-indent\">Other</span>\n                            <span class=\"right-content\">5%</span>\n                          </div>\n                        </div>\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"g-col-3\">\n            <div class=\"card box-of-map\">\n```\n  \n  \n```{r overview-map}\n\nleaflet(data = dallas_tracts, \n        elementId = \"map_overview\",\n        options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )) %>%\n  \n  # Add base\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  \n  # City outline default\n  addPolygons(\n    # group = \"none\",\n    data = acs_place,\n    fillColor = \"#333333\",\n    fillOpacity = 0.05, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  # County outline default\n  addPolygons(\n    # group = \"none\",\n    data = target_counties %>% filter(CountyFIPS == 48113),\n    fillColor = \"#333333\",\n    fillOpacity = 0.0, weight = 2, color = \"#333333\",\n    opacity = 0.1,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  # Population by tract\n  addPolygons(\n    group = \"pop\",\n    fillColor = \"#325d88\",\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup =\n      paste0(\n        \"<i>\", dallas_tracts$tract_name, \"</i><br/>\",\n        \"<b>Population:</b> \", scales::comma(dallas_tracts$pop_total), \"<br/>\",\n        \"<b>Density:</b> \", scales::comma(dallas_tracts$pop_density), \"/mi<sup>2</sup>\"\n      )\n    ) %>%\n\n  # Race/ethnicity by tract\n  addPolygons(\n    group = \"race\",\n    fillColor = ~colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace)(pop_largestrace),\n    fillOpacity = ~as.numeric(pop_racediff) + (1 - max(dallas_tracts$pop_racediff, na.rm = T))/2, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    popup = paste0(\n        \"<i>\", dallas_tracts$tract_name, \"</i><br/>\",\n        \"<b>Asian:</b> \", scales::comma(dallas_tracts$pop_asian), \" (\", scales::percent(dallas_tracts$poppct_asian), \")<br/>\",\n        \"<b>Black:</b> \", scales::comma(dallas_tracts$pop_black), \" (\", scales::percent(dallas_tracts$poppct_black), \")<br/>\",\n        \"<b>Hispanic/Latino:</b> \", scales::comma(dallas_tracts$pop_latino), \" (\", scales::percent(dallas_tracts$poppct_latino), \")<br/>\",\n        \"<b>White:</b> \", scales::comma(dallas_tracts$pop_white), \" (\", scales::percent(dallas_tracts$poppct_white), \")\"\n    )\n  ) %>%\n\n  addLegend(\n    group = \"race\",\n    layerId = \"race\",\n    \"bottomright\",\n    pal = colorFactor(cpaltemplates::palette_cpal_main, dallas_tracts$pop_largestrace, na.color=NULL),\n    values = ~pop_largestrace,\n    title = \"Race\",\n    opacity = 0.7\n  ) %>%\n  \n  # Map bounds\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%\n  \n  # Layers control\n  addLayersControl(\n    baseGroups = c(\"none\", \"pop\", \"race\")\n  ) %>% \n  htmlwidgets::onRender(\"\n    function(el, x) {\n      var map_overview = this;\n\n      function toggleLayer(layerName) {\n        var input = $(map_overview.getContainer()).find('.leaflet-control-layers-selector').filter(function() {\n          return $(this).next('span').text().trim() === layerName;\n        });\n      \n        if(input.length) {\n          input[0].click();\n        }\n      };\n      \n      $('#pop').on('click', function() {\n        console.log('Pop clicked');\n        toggleLayer('pop');\n      });\n      \n      $('#race').on('click', function() {\n        console.log('Race clicked');\n        toggleLayer('race');\n      });\n      \n      $('#lang').on('click', function() {\n        console.log('Lang clicked');\n        toggleLayer('lang');\n      });\n      \n      $('.info.legend.leaflet-control').hide();\n      map_overview.on('overlayadd', function(eventLayer) {\n        if (eventLayer.name === 'race') {\n            $('.info.legend.leaflet-control').show();\n        } else {\n            $('.info.legend.leaflet-control').hide();\n        }\n      });\n    }\n  \")\n```\n  \n  \n```{=html}\n            </div>\n          </div>\n        </div>\n        \n        <hr/>\n        \n        <div class=\"grid\" style=\"--bs-columns: 5;\">\n          <div class=\"g-col-2\">\n            <h2 class=\"slim\" id=\"human-development\">Human Development</h2>\n            <div class=\"accordion\" id=\"human-development\">\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#hqa\" aria-expanded=\"true\" aria-controls=\"hqa\">\n                    Housing Quality and Affordability\n                  </button>\n                </b>\n                <div id=\"hqa\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#human-development\">\n                  <div class=\"accordion-body\">\n                      \n                    <a href=\"#overcrowdedDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"overcrowded-housing\">\n                        <span>Overcrowded housing (%)</span>\n                        <div class=\"button-content-details\" id=\"overcrowdedDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=1, color=1, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. tracts\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#rentburdenDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"rent-burden\">\n                        <span>Rent burden</span>\n                        <div class=\"button-content-details\" id=\"rentburdenDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=2, color=2, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#unhousedratesDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\">\n                      <div class=\"button-content\" id=\"unhoused-rates\">\n                        <span>Unhoused rates</span>\n                        <div class=\"button-content-details\" id=\"rentburdenDetails\">\n                          <div class=\"histogram card\">\n                          The unhoused rate for North Texas is 1 in `r scales::number(1/metrics$sdf[[3]]$all, accuracy = 1)` people.\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                      \n                  </div>\n                </div>\n              </div>\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#hfi\" aria-expanded=\"true\" aria-controls=\"hfi\">\n                    Healthy Family & Individuals\n                  </button>\n                </b>\n                <div id=\"hfi\" class=\"accordion-collapse collapse\" data-bs-parent=\"#human-development\">\n                  <div class=\"accordion-body\">\n                      \n                    <a href=\"#uninsuredDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"uninsured-population\">\n                        <span>Uninsured population</span>\n                        <div class=\"button-content-details\" id=\"uninsuredDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=4, color=4, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. tracts\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#lifeexpDetails\" class=\"list-group-item list-group-item-action disabled\" aria-expanded=\"false\" aria-disabled=\"true\">\n                      <div class=\"button-content\" id=\"life-expectancy\">\n                        <span>Life expectancy</span>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#healthindexDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"health-index\">\n                        <span>Health index</span>\n                        <div class=\"button-content-details\" id=\"healthindexDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=6, color=6, title = NULL, bin_labels = NULL, pct = FALSE, axis_label = \"Num. tracts\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                  </div>\n                </div>\n              </div>\n              <div class=\"accordion-item\">\n                <b class=\"accordion-header\">\n                  <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#trn\" aria-expanded=\"true\" aria-controls=\"trn\">\n                    Transportation\n                  </button>\n                </b>\n                <div id=\"trn\" class=\"accordion-collapse collapse\" data-bs-parent=\"#human-development\">\n                  <div class=\"accordion-body\">\n                      \n                    <a href=\"#longpubDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"pub-commute-long\">\n                        <span class=\"left-content\">Long public commute</span>\n                        <div class=\"button-content-details\" id=\"longpubDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=7, color=7, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#longprivDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"priv-commute-long\">\n                        <span class=\"left-content\">Long private commute</span>\n                        <div class=\"button-content-details\" id=\"longprivDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=8, color=8, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#pubcomDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"pub-commute\">\n                        <span class=\"left-content\">Public commuters</span>\n                        <div class=\"button-content-details\" id=\"pubcomDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=9, color=9, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#privcomDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"priv-commute\">\n                        <span class=\"left-content\">Private commuters</span>\n<div class=\"button-content-details\" id=\"privcomDetails\">\n                          <div class=\"histogram card\">\n                          \n```\n\n```{r}\nbins_hc(n=10, color=10, title = NULL, bin_labels = NULL, pct = TRUE, axis_label = \"Num. PUMAs\")\n```\n\n```{=html}\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    \n                    <a href=\"#novehDetails\" class=\"list-group-item list-group-item-action\" aria-expanded=\"false\" data-bs-toggle=\"collapse\">\n                      <div class=\"button-content\" id=\"no-vehicle\">\n                        <span class=\"left-content\">Households with no vehicle</span>\n                      </div>\n                    </a>\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"g-col-3\">\n            <div class=\"card box-of-map\">\n```\n  \n  \n```{r map-hd}\n\nleaflet(data = dallas_smallgeo, \n        elementId = \"map-hd\",\n        options = leafletOptions(\n               zoomSnap = 0.5,\n               zoomDelta = 0.5,\n               minZoom = 9.5,\n               wheelPxPerZoomLevel = 120\n               )) %>%\n  \n  # Add base\n  addTiles(urlTemplate = cpaltemplates::cpal_mapbox_mono, attribution = cpaltemplates::cpal_leaflet) %>%\n  \n  # City outline default\n  addPolygons(\n    # group = \"none\",\n    data = acs_place,\n    fillColor = \"#333333\",\n    fillOpacity = 0.05, weight = 2, color = \"#333333\",\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  # County outline default\n  addPolygons(\n    # group = \"none\",\n    data = target_counties %>% filter(CountyFIPS == 48113),\n    fillColor = \"#333333\",\n    fillOpacity = 0.0, weight = 2, color = \"#333333\",\n    opacity = 0.1,\n    smoothFactor = 1,\n    options = pathOptions(clickable = F, interactive = F)\n  ) %>%\n  \n  addPolygons(\n    group = \"overcrowded-housing\",\n    data = metrics$sdf[[1]],\n    fillColor = ~colorBin(palette = binning(1, 1)$palette, domain = c(0, max(metrics$sdf[[1]]$all, na.rm = TRUE)))(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup =\n      paste0(\n        \"<i>\", metrics$sdf[[1]]$NAME, \"</i><br/>\",\n        \"<b>Pct in overcrowded housing:</b> \", scales::percent(metrics$sdf[[1]]$all, accuracy = 0.1)\n      )\n    ) %>%\n  \n  addPolygons(\n    group = \"rent-burden\",\n    data = metrics$sdf[[2]],\n    fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(0, max(metrics$sdf[[2]]$all, na.rm = TRUE) ))(all),\n    fillOpacity = 0.5,\n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n     highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = \n      paste0(\n        \"<i>\", metrics$sdf[[2]]$NAME, \"</i><br/>\",\n        \"<b>Pct households with rent more than 30% of income:</b> \", scales::percent(metrics$sdf[[2]]$all, accuracy = 0.1)\n      )\n    ) %>%\n\n  # addPolygons(\n  #   group = \"unhoused-rates\",\n  #   data = metrics$sdf[[3]],\n  #   fillColor = ~colorNumeric(palette = binning(3, 3)$palette, domain = c(0, max(metrics$sdf[[3]]$all, na.rm = TRUE) ))(all),\n  #   fillOpacity = 0.5, \n  #   stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n  #   highlight = highlightOptions(\n  #               opacity = 0.5,\n  #               bringToFront = TRUE,\n  #               sendToBack = TRUE),\n  #   popup = paste0(\n  #       \"<i>\", metrics$sdf[[3]]$NAME, \"</i><br/>\",\n  #       \"<b>Pct individuals experiencing homelessness:</b> \", scales::percent(metrics$sdf[[3]]$all, accuracy = 0.1)\n  #     )\n  # ) %>%\n  \n  addPolygons(\n    group = \"uninsured-population\",\n    data = metrics$sdf[[4]],\n    fillColor = ~colorNumeric(palette = binning(4, 4)$palette, domain = c(0, max(metrics$sdf[[4]]$all, na.rm = TRUE) ))(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[4]]$NAME, \"</i><br/>\",\n        \"<b>Pct individuals uninsured:</b> \", scales::percent(metrics$sdf[[4]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  # \n  # addPolygons(\n  #   group = metrics$Metric[5],\n  #   data = metrics$sdf[[5]],\n  #   fillColor = ~colorNumeric(palette = palette_cpal_green, domain = c(0, max(metrics$sdf[[5]]$all, na.rm = TRUE) ))(all),\n  #   fillOpacity = ~0.6 * (all - min(metrics$sdf[[5]]$all, na.rm = TRUE)) / max(metrics$sdf[[5]]$all, na.rm = TRUE) + 0.2,\n  #   weight = 1,\n  #   color = \"#FFFFFF\",\n  #   # dashArray = \"3\",\n  #   label = lapply(1:nrow(metrics$sdf[[5]]), function(i) {\n  #     htmltools::HTML(paste0(\n  #       \"<i>\", metrics$sdf[[5]]$NAME, \"</i><br/>\",\n  #       \"<b>Life expectancy:</b> \", scales::percent(metrics$sdf[[5]]$all)\n  #     ))\n  #   }),\n  #   labelOptions = labelOptions(direction = 'auto', html = TRUE)\n  # ) %>%\n  \n    \n  addPolygons(\n    group = \"health-index\",\n    data = metrics$sdf[[6]],\n    fillColor = ~colorNumeric(palette = binning(6, 6)$palette, domain = c(min(metrics$sdf[[6]]$all, na.rm = TRUE), max(metrics$sdf[[6]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[6]]$NAME, \"</i><br/>\",\n        \"<b>Health index:</b> \", scales::number(metrics$sdf[[6]]$all, accuracy = 0.001), \"<br/>\",\n        \"<br/>\",\n        \"<i><sup>*Lower index score is better</sup></i>\"\n      )\n  ) %>%\n\n  addPolygons(\n    group = \"pub-commute-long\",\n    data = metrics$sdf[[7]],\n    fillColor = ~colorNumeric(palette = binning(7, 7)$palette, domain = c(min(metrics$sdf[[7]]$all, na.rm = TRUE), max(metrics$sdf[[7]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[7]]$NAME, \"</i><br/>\",\n        \"<b>Percent longer public commute than 45 min.:</b> \", scales::percent(metrics$sdf[[7]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  addPolygons(\n    group = \"priv-commute-long\",\n    data = metrics$sdf[[8]],\n    fillColor = ~colorNumeric(palette = binning(8, 8)$palette, domain = c(min(metrics$sdf[[8]]$all, na.rm = TRUE), max(metrics$sdf[[8]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[8]]$NAME, \"</i><br/>\",\n        \"<b>Percent longer private commute than 45 min.:</b> \", scales::percent(metrics$sdf[[8]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  addPolygons(\n    group = \"pub-commute\",\n    data = metrics$sdf[[9]],\n    fillColor = ~colorNumeric(palette = binning(9, 9)$palette, domain = c(min(metrics$sdf[[9]]$all, na.rm = TRUE), max(metrics$sdf[[9]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[9]]$NAME, \"</i><br/>\",\n        \"<b>Percent using public commute:</b> \", scales::percent(metrics$sdf[[9]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  addPolygons(\n    group = \"priv-commute\",\n    data = metrics$sdf[[10]],\n    fillColor = ~colorNumeric(palette = binning(2, 2)$palette, domain = c(min(metrics$sdf[[10]]$all, na.rm = TRUE), max(metrics$sdf[[10]]$all, na.rm = TRUE) ), na.color = \"#a4a6ab\")(all),\n    fillOpacity = 0.5, \n    stroke = TRUE, color = \"#333333\", weight = 1.5, opacity = 0.1,\n    highlight = highlightOptions(\n                opacity = 0.5,\n                bringToFront = TRUE,\n                sendToBack = TRUE),\n    popup = paste0(\n        \"<i>\", metrics$sdf[[10]]$NAME, \"</i><br/>\",\n        \"<b>Percent using private commute:</b> \", scales::percent(metrics$sdf[[10]]$all, accuracy = 0.1)\n      )\n  ) %>%\n  \n  # Map bounds\n  setMaxBounds(bounds[1], bounds[2], bounds[3], bounds[4]) %>%\n\n  # Layers control\n  addLayersControl(\n    baseGroups = c(\"None\", \"overcrowded-housing\", \"rent-burden\", \"unhoused-rates\", \"uninsured-population\", \"life-expectancy\", \"health-index\", \"pub-commute-long\", \"priv-commute-long\", \"pub-commute\", \"priv-commute\", \"no-vehicle\", metrics$Metric)\n  ) %>%\n  htmlwidgets::onRender(paste0(\"\n    function(el, x) {\n      var map_metrics = this;\n\n      function toggleLayer(layerName) {\n        var input = $(map_metrics.getContainer()).find('.leaflet-control-layers-selector').filter(function() {\n          return $(this).next('span').text().trim() === layerName;\n        });\n\n        if(input.length) {\n          input[0].click();\n        }\n      };\n\n      $('#overcrowded-housing').on('click', function() {\n        toggleLayer('overcrowded-housing');\n      });\n\n      $('#rent-burden').on('click', function() {\n        toggleLayer('rent-burden');\n      });\n\n      $('#unhoused-rates').on('click', function() {\n        toggleLayer('None');\n      });\n\n      $('#uninsured-population').on('click', function() {\n        toggleLayer('uninsured-population');\n      });\n\n      $('#health-index').on('click', function() {\n        toggleLayer('health-index');\n      });\n\n      $('#pub-commute-long').on('click', function() {\n        toggleLayer('pub-commute-long');\n      });\n\n      $('#priv-commute-long').on('click', function() {\n        toggleLayer('priv-commute-long');\n      });\n\n      $('#pub-commute').on('click', function() {\n        toggleLayer('pub-commute');\n      });\n\n      $('#priv-commute').on('click', function() {\n        toggleLayer('priv-commute');\n      });\n\n      $('#no-vehicle').on('click', function() {\n        toggleLayer('no-vehicle');\n      });\n\n    }\n  \"))\n\n```\n  \n  \n```{=html}\n            </div>\n          </div>\n        </div>\n        \n        \n        <hr/>\n        \n        \n        \n      </div>\n    </div>\n    \n    <div class=\"g-col-8 card\" id=\"dallaspeers\" style=\"height: 100vh; overflow-y: auto; margin-top: 3vh; display: none;\"> \n      <div class=\"card-body\">\n        \n```     \n\n```{r peer_medians, output = 'asis'}\n\nfor(system in peer_medians %>% distinct(System) %>% pull()) {\n  cat(\"##\", system, \"\\n\")\n\n  cat(\"<div class=\\\"indent\\\">\")\n  \n  for(area in peer_medians %>% filter(System == system) %>% distinct(Area) %>% pull()) {\n    cat(\"###\", area, \"\\n\")\n    \n    # Generate and mutate the table\n    display <- peer_medians %>%\n      filter(System == system, Area == area) %>%\n      mutate(\n        PeerMedian = case_when(\n          Measure == \"%\" ~ scales::percent(PeerMedian),\n          TRUE ~ scales::number(PeerMedian)\n        ),\n        BestPeer = case_when(\n          Measure == \"%\" ~ scales::percent(BestPeer),\n          TRUE ~ scales::number(BestPeer)\n        ),\n        Dallas = case_when(\n          Measure == \"%\" ~ scales::percent(Dallas),\n          TRUE ~ scales::number(Dallas)\n        ),\n        DallasRank = scales::number(DallasRank)\n      ) %>%\n      select(\n        \"Metric\" = Metric,\n        Dallas,\n        \"Dallas Rank\" = DallasRank,\n        \"Peer Median\" = PeerMedian,\n        \"Best Peer\" = BestPeer\n      )\n    \n    display %>%\n      kable() %>%\n      kable_styling(fixed_thead = T) %>%\n      column_spec(1, width = \"40vw\") %>%\n      column_spec(2, width = \"10vw\") %>%\n      column_spec(3, width = \"10vw\") %>%\n      column_spec(4, width = \"10vw\") %>%\n      column_spec(5, width = \"10vw\") %>%\n      print()\n  }\n  \n  cat(\"</div>\")\n  \n}\n\n\n```\n\n```{=html}\n      </div>\n    </div>\n    \n    \n    <div class=\"g-col-8\" id=\"compareall\" style=\"height: 100vh; overflow-y: auto; display: none;\">\n    \n      <div style=\"margin: 3vh;\"></div>\n      \n```\n\n\n::: {.callout-note appearance=\"simple\" style=\"width: 50%; margin: auto;\"}\n\nThis tool is under continuous development...check back later for more!\n\n:::\n\n```{=html}\n    \n    </div>\n    \n    \n    <div class=\"g-col-2\" style=\"height: 100vh; overflow-y: auto;\">\n    \n      <div class=\"card text-bg-info mb-3\" style=\"max-width: 24rem\">\n      \n        <div style=\"font-size: 24px; text-align: center; margin: 5px; margin-top: 15px\">\n          <b><i class=\"bi bi-info-circle-fill\"></i>  Sorry for the mess.</b>\n        </div>\n        \n        <div class=\"card-body\">\n          \n          <p class=\"card-text\">This tool is under development, so many intended features and functionalities remain missing. Feedback is appreciated.</p>\n        \n        </div>\n      \n      </div>\n    \n    </div>\n    \n    \n  </div>\n</div>\n\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":9,"fig-height":7,"fig-format":"retina","fig-dpi":300,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["www/javascript/script.html"],"toc":false,"toc-depth":2,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"www/web_report.scss","toc-title":"Contents","toc-location":"right","anchor-sections":false,"code-summary":"Reveal Code","code-copy":"hover","smooth-scroll":true,"grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"300px"},"code-block-bg":true,"code-block-border-left":"#042D33","message":false,"pagetitle":"Place & Equity"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}